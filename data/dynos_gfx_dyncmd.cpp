#include "dynos.cpp.h"

//
// Cappy Eyes
//

#define CAPPY_EYES_POINT_COUNT      32     // Default value
#define CAPPY_EYES_RADIUS           44.f   // Default value
#define CAPPY_EYES_FORWARD_OFFSET   8.f    // Default value
#define CAPPY_EYES_GAP              0.90f
#define CAPPY_EYES_TEXCOORDS_MULT   1.05f
#define CAPPY_EYES_WH_RATIO         0.75f
#define CAPPY_EYES_DEPTH            16
#define CAPPY_EYES_CURVE            12

static const unsigned char sCappyEyesTexDataPng[] = {
    0x89, 0x50, 0x4E, 0x47, 0xD,  0xA,  0x1A, 0xA,  0x0,  0x0,  0x0,  0xD,  0x49, 0x48, 0x44, 0x52,
    0x0,  0x0,  0x0,  0x80, 0x0,  0x0,  0x0,  0xC0, 0x8,  0x6,  0x0,  0x0,  0x0,  0xCC, 0x66, 0x6B,
    0xA7, 0x0,  0x0,  0x0,  0x9,  0x70, 0x48, 0x59, 0x73, 0x0,  0x0,  0xE,  0xC3, 0x0,  0x0,  0xE,
    0xC3, 0x1,  0xC7, 0x6F, 0xA8, 0x64, 0x0,  0x0,  0x19, 0x26, 0x49, 0x44, 0x41, 0x54, 0x78, 0xDA,
    0xED, 0x5D, 0x9,  0x58, 0x56, 0xD5, 0xBA, 0xC6, 0x79, 0x44, 0x45, 0x40, 0x73, 0xC4, 0x11, 0x9C,
    0xC5, 0x39, 0x54, 0x9C, 0xD2, 0x8C, 0x9C, 0xE7, 0x72, 0x2A, 0xBD, 0xEA, 0x29, 0x8F, 0x59, 0x76,
    0x72, 0xC0, 0x4A, 0x33, 0xB3, 0x6E, 0x59, 0xB7, 0xEC, 0x74, 0xEF, 0x55, 0x33, 0xBB, 0x9A, 0x95,
    0x69, 0x5A, 0xF6, 0xDC, 0x4C, 0x33, 0x8F, 0x3F, 0x20, 0x92, 0x86, 0x94, 0x96, 0x53, 0x66, 0x6A,
    0x9A, 0x21, 0x29, 0x4E, 0x39, 0xA1, 0xF0, 0x9E, 0xEF, 0xDD, 0xB8, 0x11, 0x10, 0x54, 0xFE, 0xFD,
    0xF,  0x6B, 0xC3, 0xFA, 0x9E, 0xE7, 0x7D, 0xE0, 0xDF, 0x7B, 0xD,  0xEF, 0xF7, 0xAD, 0x77, 0xAD,
    0xBD, 0xD6, 0xFA, 0xF7, 0xBF, 0xB7, 0x4F, 0x68, 0x68, 0x28, 0x34, 0xA,  0x2E, 0x7C, 0x74, 0x10,
    0xB4, 0x0,  0x74, 0x20, 0xB4, 0x0,  0x34, 0xB4, 0x0,  0x34, 0xB4, 0x0,  0x34, 0xB4, 0x0,  0x34,
    0xB4, 0x0,  0x34, 0xB4, 0x0,  0x34, 0xB4, 0x0,  0x34, 0xB4, 0x0,  0x34, 0xB4, 0x0,  0x34, 0xB4,
    0x0,  0x34, 0xB4, 0x0,  0x34, 0xB4, 0x0,  0x34, 0xB4, 0x0,  0x34, 0xB4, 0x0,  0x34, 0xB4, 0x0,
    0x34, 0xB4, 0x0,  0x6C, 0x83, 0xF0, 0xF0, 0x70, 0x4C, 0x9A, 0x34, 0x9,  0x8B, 0x17, 0x2F, 0xC6,
    0x97, 0x5F, 0x7E, 0x89, 0xED, 0xDB, 0xB7, 0xE3, 0xC8, 0x91, 0x23, 0x48, 0x4E, 0x4E, 0xCE, 0x11,
    0x3C, 0xC7, 0x34, 0x4C, 0xCB, 0x3C, 0xCC, 0xCB, 0x32, 0xB4, 0x0,  0x6C, 0x84, 0xD1, 0xA3, 0x47,
    0x63, 0xC5, 0x8A, 0x15, 0xF8, 0xF9, 0xE7, 0x9F, 0x91, 0x9A, 0x9A, 0xA,  0xAB, 0xC6, 0x32, 0x58,
    0x16, 0xCB, 0x64, 0xD9, 0x5A, 0x0,  0xA,  0xA2, 0x4F, 0x9F, 0x3E, 0x46, 0x8F, 0x3D, 0x71, 0xE2,
    0x4,  0xDC, 0x6D, 0xAC, 0x83, 0x75, 0xB1, 0x4E, 0x2D, 0x0,  0x2F, 0x63, 0xD0, 0xA0, 0x41, 0x58,
    0xB7, 0x6E, 0x9D, 0x4B, 0x7A, 0xBA, 0x33, 0x23, 0x3,  0xEB, 0x26, 0x7,  0x2D, 0x0,  0x2F, 0xF4,
    0xF8, 0xAF, 0xBF, 0xFE, 0xDA, 0x2B, 0xD,  0x9F, 0x93, 0x10, 0xC8, 0xC5, 0xAE, 0x23, 0x82, 0xAD,
    0x4,  0x10, 0x16, 0x16, 0x86, 0xA5, 0x4B, 0x97, 0xE2, 0xEA, 0xD5, 0xAB, 0x50, 0xCD, 0xC8, 0x89,
    0xDC, 0xC8, 0x51, 0xB,  0xC0, 0xD,  0x98, 0x3A, 0x75, 0x2A, 0x12, 0x13, 0x13, 0xA1, 0xBA, 0x91,
    0x23, 0xB9, 0x6A, 0x1,  0xB8, 0x8,  0x6D, 0xDB, 0xB6, 0xC5, 0x9A, 0x35, 0x6B, 0x60, 0x37, 0x23,
    0x67, 0x72, 0xD7, 0x2,  0xB0, 0x80, 0x88, 0x88, 0x8,  0xEC, 0xDF, 0xBF, 0x1F, 0x76, 0x35, 0x72,
    0xA7, 0xF,  0x5A, 0x0,  0x4E, 0x60, 0xE2, 0xC4, 0x89, 0xB8, 0x70, 0xE1, 0x2,  0xEC, 0x6E, 0xF4,
    0x81, 0xBE, 0x68, 0x1,  0xE4, 0x1,  0x73, 0xE6, 0xCC, 0xC1, 0xB5, 0x6B, 0xD7, 0x90, 0x5F, 0x8C,
    0xBE, 0xD0, 0x27, 0x2D, 0x80, 0xBB, 0xC0, 0xC2, 0x85, 0xB,  0x91, 0x5F, 0x8D, 0xBE, 0x69, 0x1,
    0xE4, 0x82, 0x96, 0x2D, 0x5B, 0x62, 0xED, 0xDA, 0xB5, 0xC8, 0xEF, 0x46, 0x1F, 0xE9, 0xAB, 0x16,
    0x40, 0x36, 0x70, 0xAF, 0xBD, 0xA0, 0x18, 0x7D, 0xD5, 0x2,  0xC8, 0x4,  0x6E, 0xA0, 0x14, 0x34,
    0xA3, 0xCF, 0x5A, 0x0,  0x82, 0x37, 0xDF, 0x7C, 0x13, 0x5,  0xD5, 0xE8, 0x7B, 0x81, 0x16, 0xC0,
    0x94, 0x29, 0x53, 0x94, 0xD8, 0xCF, 0xF7, 0xE6, 0xF7, 0x8,  0x8C, 0x41, 0x81, 0x14, 0x40, 0xBF,
    0x7E, 0xFD, 0xF2, 0xC5, 0x3A, 0xDF, 0x15, 0xFB, 0x4,  0x8C, 0x45, 0x81, 0x12, 0x0,  0xBF, 0x30,
    0xF9, 0xE5, 0x97, 0x5F, 0xA0, 0x2D, 0xDD, 0x18, 0xB,  0x6F, 0x7D, 0x89, 0xE4, 0x15, 0x1,  0xAC,
    0x5F, 0xBF, 0x5E, 0xB7, 0x7A, 0x36, 0x63, 0x4C, 0xA,  0x84, 0x0,  0x22, 0x23, 0x23, 0x75, 0x6B,
    0xE7, 0x62, 0x8C, 0x4D, 0xBE, 0x16, 0x40, 0xCF, 0x9E, 0x3D, 0xF5, 0x75, 0xFF, 0xE,  0xF3, 0x1,
    0xC6, 0x28, 0x5F, 0xA,  0x80, 0xBB, 0x5F, 0xBC, 0xE3, 0x56, 0xDB, 0xED, 0x8D, 0x31, 0xF2, 0xE4,
    0x4E, 0xA1, 0xC7, 0x4,  0x30, 0x7F, 0xFE, 0x7C, 0xDD, 0xBA, 0x77, 0x69, 0x8C, 0x55, 0xBE, 0x12,
    0x40, 0x8F, 0x1E, 0x3D, 0x70, 0xF1, 0xE2, 0x45, 0xDD, 0xB2, 0x77, 0x69, 0x8C, 0x15, 0x63, 0x96,
    0x6F, 0x4,  0xB0, 0x71, 0xE3, 0x46, 0xDD, 0xAA, 0x79, 0x34, 0xC6, 0x2C, 0x5F, 0x8,  0x80, 0x37,
    0x43, 0x68, 0x73, 0xCE, 0x3C, 0x71, 0x23, 0x89, 0x5B, 0x5,  0xC0, 0x7B, 0xE2, 0xF8, 0x73, 0x2B,
    0x6D, 0xCE, 0x19, 0x63, 0xE7, 0xEE, 0xFB, 0xA,  0xDD, 0x2A, 0x80, 0x57, 0x5E, 0x79, 0x45, 0xB7,
    0xA2, 0x45, 0x63, 0xC,  0x6D, 0x29, 0x0,  0x2A, 0xD7, 0xE,  0xB7, 0x71, 0xAB, 0x6E, 0x8C, 0xA1,
    0x3B, 0x47, 0x1,  0x1F, 0x15, 0x7B, 0x7F, 0xEA, 0x95, 0x2B, 0x38, 0xBD, 0x61, 0x3,  0xE,  0x4E,
    0x9E, 0x8C, 0x1F, 0xFB, 0xF7, 0x47, 0x42, 0x58, 0x18, 0xE2, 0x82, 0x82, 0x10, 0x1B, 0x18, 0x68,
    0x80, 0xFF, 0xF3, 0x18, 0xCF, 0x31, 0xD,  0xD3, 0x32, 0x8F, 0x1E, 0x5,  0x14, 0x11, 0x80, 0x33,
    0xBD, 0x3F, 0x2D, 0x35, 0x15, 0x7F, 0x7E, 0xFE, 0xB9, 0xD1, 0xA8, 0x31, 0xBE, 0xBE, 0x70, 0xF8,
    0x14, 0xCA, 0x13, 0x98, 0x87, 0x79, 0x59, 0x46, 0x5A, 0x3E, 0xFB, 0x8A, 0xD9, 0x9D, 0xA3, 0x80,
    0x5B, 0x4,  0x30, 0x6F, 0xDE, 0xBC, 0x3C, 0xF5, 0xF6, 0xDF, 0x17, 0x2D, 0xC2, 0xF6, 0x90, 0x6,
    0x70, 0x14, 0x2A, 0xEC, 0x12, 0xB0, 0x2C, 0x96, 0x99, 0x9F, 0x46, 0x5,  0xC6, 0xD4, 0x16, 0x2,
    0xE0, 0x36, 0xE6, 0xDD, 0xCE, 0xFC, 0x93, 0xD6, 0xAE, 0x45, 0x6C, 0xE5, 0x2A, 0xD2, 0x68, 0x45,
    0xB2, 0x20, 0xCA, 0xA7, 0x30, 0x12, 0x4,  0x87, 0xA5, 0x67, 0x27, 0xA,  0xCE, 0xF8, 0xF8, 0xE0,
    0x92, 0x20, 0xE5, 0x6,  0xF8, 0x3F, 0x8F, 0xF1, 0x1C, 0xD3, 0x30, 0x2D, 0xF3, 0x64, 0x2F, 0x87,
    0x65, 0x27, 0xE5, 0x93, 0x1B, 0x4D, 0x19, 0x53, 0x77, 0x6C, 0x11, 0xBB, 0x5C, 0x0,  0x7C, 0xAA,
    0xC6, 0x9D, 0x2C, 0xE5, 0xCF, 0x3F, 0xB1, 0x77, 0xC4, 0x48, 0x38, 0xA,  0x17, 0xCD, 0x82, 0xDD,
    0xD2, 0x68, 0x27, 0xA5, 0x21, 0x53, 0xA4, 0x51, 0x91, 0x47, 0x30, 0xF,  0xF3, 0xB2, 0x8C, 0xEC,
    0xE5, 0xB2, 0x2E, 0xD6, 0x69, 0x77, 0x63, 0x6C, 0x95, 0x17, 0x40, 0x6C, 0x6C, 0xEC, 0x6D, 0x9D,
    0x38, 0x13, 0x1D, 0x83, 0xD8, 0x7B, 0xAA, 0x49, 0xC3, 0x14, 0xCB, 0x40, 0x42, 0xA1, 0xA2, 0x38,
    0x2B, 0x43, 0x37, 0x5C, 0x4,  0x96, 0xC5, 0x32, 0x33, 0xD7, 0xC1, 0x3A, 0x59, 0xB7, 0x9D, 0x8D,
    0xB1, 0x55, 0x5A, 0x0,  0xBC, 0xB5, 0xE9, 0x76, 0xF7, 0xF8, 0x25, 0xAD, 0xFD, 0xC,  0x51, 0x25,
    0xCB, 0xC0, 0x51, 0xA4, 0xB8, 0x81, 0x58, 0x69, 0x98, 0x24, 0xE9, 0xA1, 0x70, 0x13, 0x58, 0x36,
    0xEB, 0x30, 0xEB, 0x63, 0xDD, 0xE4, 0x60, 0x57, 0x63, 0x6C, 0x5D, 0x7D, 0xFB, 0x98, 0x4B, 0x5,
    0xB0, 0x6A, 0xD5, 0xAA, 0x5C, 0xC9, 0xFF, 0xF1, 0x7F, 0xCB, 0xE0, 0x28, 0x56, 0x4A, 0x1A, 0xA2,
    0x84, 0x81, 0x5D, 0x85, 0x8B, 0xE3, 0xAA, 0x34, 0xE,  0xDC, 0xC,  0xD6, 0xC1, 0xBA, 0xCC, 0x7A,
    0xC9, 0x81, 0x5C, 0xEC, 0x6A, 0x8C, 0xB1, 0x92, 0x2,  0xE0, 0x32, 0x25, 0xB7, 0x9B, 0x3D, 0x8E,
    0xBD, 0xF5, 0x36, 0x1C, 0x45, 0x4B, 0x1A, 0x88, 0x92, 0x46, 0x38, 0x2A, 0x80, 0x87, 0xC1, 0x3A,
    0x59, 0xB7, 0xC9, 0x83, 0x9C, 0xEC, 0x68, 0x8C, 0xB1, 0x2B, 0x97, 0x84, 0x3E, 0xEE, 0xBE, 0xD5,
    0x2B, 0xE9, 0xB3, 0xCF, 0xE1, 0x28, 0x2E, 0xC3, 0x7E, 0xD1, 0x52, 0x88, 0x96, 0xC0, 0x9F, 0x12,
    0xC0, 0x4B, 0x60, 0xDD, 0xD1, 0x86, 0x0,  0x4A, 0x19, 0x9C, 0xC8, 0xCD, 0x8E, 0xE6, 0xCA, 0x5B,
    0xC7, 0x7C, 0xDC, 0x39, 0xF9, 0x3B, 0xF7, 0x5D, 0x3C, 0xA2, 0xCB, 0x7,  0xC8, 0xB0, 0x5B, 0x1A,
    0x31, 0x12, 0xF4, 0x53, 0x2,  0x98, 0x90, 0x6,  0x40, 0x49, 0x5F, 0xA0, 0x74, 0x79, 0xA0, 0xAC,
    0x1F, 0x50, 0xCE, 0xFF, 0x26, 0xF8, 0x99, 0xC7, 0x79, 0x9E, 0xE9, 0x32, 0xE7, 0xB3, 0x8,  0x72,
    0x20, 0x17, 0x72, 0x22, 0x37, 0x72, 0x2C, 0xC8, 0x93, 0x41, 0x1F, 0x57, 0xDD, 0xF0, 0x91, 0x7D,
    0xF2, 0x77, 0xF9, 0xE8, 0x6F, 0xD8, 0x56, 0xB3, 0xAE, 0x4,  0xBA, 0xC,  0x62, 0x4,  0x67, 0x5,
    0x20, 0x4A, 0xB0, 0xD1, 0x2B, 0x0,  0x15, 0x2B, 0x3,  0x55, 0x6A, 0x2,  0xB5, 0x82, 0x81, 0xE0,
    0xC6, 0x40, 0x83, 0x66, 0x40, 0xA3, 0xE6, 0xE9, 0x7F, 0xF9, 0x99, 0xC7, 0x79, 0x9E, 0xE9, 0x98,
    0x9E, 0xF9, 0xCC, 0x32, 0x2C, 0xE2, 0xEC, 0xD,  0x4E, 0xE4, 0x46, 0x8E, 0xE4, 0x6A, 0xB7, 0xC9,
    0xA0, 0xAB, 0x6E, 0x18, 0x71, 0x89, 0x0,  0x16, 0x2C, 0x58, 0x70, 0xCB, 0xB6, 0x6E, 0x42, 0xE7,
    0xEE, 0x32, 0xCC, 0x96, 0x45, 0x94, 0xE0, 0x94, 0x0,  0x44, 0x29, 0xE9, 0xD5, 0x15, 0x2A, 0x1,
    0xD5, 0x6B, 0x3,  0x8D, 0x5B, 0x0,  0xED, 0x3B, 0x1,  0x3D, 0x1F, 0x4,  0xFA, 0xF,  0x4,  0x6,
    0xE,  0x5,  0x6,  0xD,  0x4B, 0xFF, 0xCB, 0xCF, 0x3C, 0xCE, 0xF3, 0x4C, 0xC7, 0xF4, 0xCC, 0xC7,
    0xFC, 0x66, 0x59, 0x16, 0x71, 0xEA, 0x6,  0x37, 0x72, 0x24, 0x57, 0xBB, 0x6D, 0x1F, 0x33, 0xE6,
    0xCA, 0x8,  0x60, 0xEF, 0xDE, 0xBD, 0x59, 0xC8, 0x1D, 0xFF, 0x9F, 0x45, 0x12, 0x58, 0x5F, 0x3,
    0x87, 0x4A, 0x94, 0x93, 0xDE, 0x2B, 0x28, 0x53, 0x11, 0x8,  0xAC, 0xE,  0xD4, 0x97, 0xDE, 0xDD,
    0xA1, 0xB,  0x30, 0x60, 0x8,  0x30, 0xEE, 0x31, 0xE0, 0x99, 0x69, 0xC0, 0x73, 0xB3, 0x81, 0x39,
    0x73, 0x81, 0xB9, 0xF3, 0xD2, 0xFF, 0xF2, 0x33, 0x8F, 0xF3, 0x3C, 0xD3, 0x31, 0x3D, 0xF3, 0x31,
    0x3F, 0xCB, 0x31, 0xCB, 0xB4, 0x8,  0x72, 0x33, 0x79, 0x92, 0xB3, 0x9D, 0x8C, 0x31, 0x57, 0x42,
    0x0,  0x1C, 0x8A, 0x32, 0xDB, 0xA5, 0x5F, 0xF,  0x23, 0xC6, 0xBF, 0x2A, 0x1C, 0x12, 0xDC, 0x84,
    0x12, 0xE5, 0x91, 0x26, 0x40, 0x69, 0x69, 0xB4, 0x0,  0x69, 0xBC, 0x86, 0xA1, 0x40, 0x77, 0xE9,
    0xD9, 0x63, 0xC6, 0x3,  0x33, 0x9F, 0x7,  0xDE, 0x78, 0xB,  0x78, 0xF7, 0x3D, 0xE0, 0xC3, 0xF,
    0x65, 0x7D, 0xB3, 0x1A, 0xF8, 0x74, 0x4D, 0xFA, 0x5F, 0x7E, 0xE6, 0x71, 0x9E, 0x67, 0x3A, 0xA6,
    0x67, 0x3E, 0xE6, 0x67, 0x39, 0x2C, 0x8F, 0xE5, 0x5A, 0x4,  0xB9, 0x91, 0x23, 0xB9, 0x92, 0x33,
    0xB9, 0xDB, 0xC9, 0x5C, 0x71, 0x19, 0xB0, 0x2C, 0x80, 0x59, 0xB3, 0x66, 0x65, 0x21, 0xB5, 0xAB,
    0xCF, 0x40, 0x9,  0x68, 0x79, 0x6C, 0x2D, 0x59, 0x1,  0x57, 0x4A, 0x72, 0x32, 0x27, 0x93, 0xBA,
    0x8A, 0x55, 0xE5, 0xBA, 0xDE, 0x14, 0xB8, 0x2F, 0x2,  0x98, 0xF0, 0x38, 0xF0, 0xD2, 0x2B, 0xC0,
    0x92, 0xA5, 0xC0, 0xE7, 0x32, 0xB,  0xFF, 0x7A, 0x13, 0x10, 0x15, 0x5,  0x6C, 0xDB, 0x6,  0xC4,
    0xC5, 0xA5, 0xFF, 0xE5, 0x67, 0x1E, 0xE7, 0x79, 0xA6, 0x63, 0x7A, 0xE6, 0x63, 0x7E, 0x96, 0xC3,
    0xF2, 0x58, 0x2E, 0xCB, 0xB7, 0x8,  0x72, 0x24, 0x57, 0x72, 0x26, 0x77, 0x3B, 0x19, 0x63, 0xEF,
    0x75, 0x1,  0x6C, 0xDE, 0xBC, 0xF9, 0xE6, 0x92, 0x6F, 0x8D, 0x2C, 0xF9, 0x18, 0x4C, 0xC1, 0x89,
    0x52, 0xD2, 0x4B, 0x89, 0x72, 0x32, 0x89, 0xAB, 0x29, 0x13, 0xBA, 0x8E, 0xDD, 0x80, 0x47, 0xA5,
    0x27, 0xCF, 0x7D, 0x19, 0x58, 0xB6, 0x1C, 0xF8, 0x6A, 0x43, 0x7A, 0x83, 0x27, 0x24, 0x0,  0x7B,
    0xF6, 0xF0, 0x91, 0x5A, 0x37, 0xC1, 0xCF, 0x3C, 0xCE, 0xF3, 0x4C, 0xC7, 0xF4, 0xCC, 0xC7, 0xFC,
    0x2C, 0x87, 0xE5, 0xB1, 0x5C, 0xB3, 0xE,  0x8B, 0x20, 0x57, 0x93, 0x37, 0x7D, 0xB0, 0x8B, 0x31,
    0xF6, 0x5E, 0x15, 0x40, 0x9B, 0x36, 0x6D, 0x32, 0x36, 0x7F, 0x38, 0x89, 0xDA, 0xD1, 0xB2, 0xBD,
    0x4,  0xD1, 0xF,  0xF1, 0x46, 0x60, 0xA5, 0x87, 0x96, 0x9,  0x94, 0xEB, 0x76, 0x10, 0xD0, 0xBC,
    0x1D, 0x30, 0xF8, 0x61, 0x19, 0xCE, 0x67, 0xA5, 0xF7, 0x68, 0x36, 0x2A, 0x7F, 0x24, 0xF2, 0xD3,
    0x4F, 0xC0, 0xE1, 0xC3, 0x7C, 0x2,  0x33, 0x70, 0xF2, 0x24, 0xC0, 0x2F, 0x6C, 0xF8, 0x97, 0x9F,
    0x79, 0x9C, 0xE7, 0xBF, 0xFD, 0x36, 0x3D, 0x3D, 0xF3, 0x31, 0x3F, 0xCB, 0x69, 0xD6, 0x2E, 0xBD,
    0x5C, 0x96, 0xCF, 0x7A, 0x5C, 0x80, 0x78, 0x43, 0x4,  0x7E, 0x86, 0xF,  0x76, 0x99, 0x10, 0x32,
    0xF6, 0x6C, 0x3,  0xAF, 0x9,  0x60, 0xDC, 0xB8, 0x71, 0x37, 0x6F, 0x5A, 0xF8, 0x78, 0x15, 0x1C,
    0xC,  0xA2, 0xE0, 0x5C, 0x69, 0x69, 0x18, 0xA2, 0x5C, 0x15, 0xE9, 0xAD, 0x21, 0x40, 0x27, 0x99,
    0x27, 0x4C, 0x98, 0x8,  0xFC, 0xD7, 0xDB, 0xE9, 0xC3, 0xBA, 0xC,  0xF3, 0x69, 0xD2, 0xCB, 0xD3,
    0x8E, 0x1D, 0x43, 0xDA, 0xA9, 0x53, 0xF4, 0x44, 0xD6, 0x8D, 0x97, 0x1,  0x7E, 0x7F, 0xCF, 0xBF,
    0xF2, 0x99, 0xC7, 0x8D, 0xF3, 0x22, 0x82, 0x34, 0x5E, 0x16, 0x3E, 0xFB, 0x2C, 0x3D, 0xFF, 0x78,
    0x29, 0xA7, 0x63, 0x77, 0x59, 0x19, 0x84, 0xA4, 0x97, 0x6F, 0xD6, 0x65, 0x11, 0xE4, 0x6C, 0xF2,
    0xA7, 0x2F, 0x76, 0x31, 0xB6, 0x81, 0xD7, 0x4,  0x60, 0x3E, 0xD1, 0x8B, 0x3D, 0xE6, 0xDB, 0xC6,
    0xAD, 0x25, 0x78, 0xFE, 0xD8, 0xCB, 0x80, 0x96, 0xA9, 0x94, 0xE,  0x3F, 0x99, 0xB0, 0x5,  0xCB,
    0xDA, 0x3E, 0xA2, 0x3F, 0xF0, 0xF4, 0xC,  0x63, 0x62, 0x97, 0xBA, 0x71, 0x13, 0xAE, 0xCB, 0xF0,
    0x9E, 0x26, 0x3D, 0x3C, 0xED, 0xF4, 0x69, 0x99, 0x35, 0x5E, 0xE2, 0x73, 0xD4, 0xB8, 0xB8, 0x95,
    0x82, 0xD2, 0xD2, 0xFF, 0xF2, 0xB3, 0x1C, 0x4F, 0x93, 0x11, 0x81, 0xE9, 0xAE, 0x49, 0xFA, 0xBF,
    0x36, 0x6C, 0xC0, 0xF5, 0xC5, 0x4B, 0xA4, 0x9C, 0xE9, 0xB2, 0x44, 0xEC, 0x7,  0xD4, 0x6B, 0x9A,
    0x5E, 0xBE, 0x59, 0x97, 0xB,  0xB0, 0xD7, 0x10, 0x81, 0xBF, 0xE1, 0x8B, 0x5D, 0x46, 0x1,  0xAB,
    0x4F, 0x1E, 0xB3, 0x24, 0x0,  0xF3, 0xB7, 0x7E, 0x7F, 0x2C, 0xFF, 0x8,  0x8E, 0xD2, 0x1,  0x88,
    0x96, 0x21, 0xF9, 0x4A, 0xD9, 0x7B, 0x0,  0x13, 0x1,  0x32, 0x4C, 0x37, 0x69, 0x2B, 0x4B, 0x39,
    0x19, 0xB6, 0x9F, 0x9B, 0x83, 0xE4, 0xE5, 0x1F, 0xE0, 0x2F, 0x87, 0x3,  0xD7, 0xD9, 0xAB, 0x39,
    0xCC, 0xFF, 0xF5, 0x57, 0x7A, 0x63, 0xB3, 0xE1, 0xB3, 0x83, 0xC7, 0xCF, 0x9F, 0x47, 0xDA, 0xF1,
    0xE3, 0xB8, 0xBE, 0x7B, 0x37, 0xCE, 0x6F, 0xD9, 0x82, 0xFD, 0xCB, 0x96, 0xE1, 0x97, 0xC8, 0x67,
    0x81, 0xFE, 0xC3, 0x80, 0x46, 0xAD, 0x0,  0xFF, 0xA0, 0x9B, 0x75, 0xB9, 0x0,  0xE4, 0x4E, 0x1F,
    0xE8, 0xB,  0x7D, 0xB2, 0x83, 0xB1, 0xD,  0xBC, 0x22, 0x0,  0x5E, 0x7B, 0x2E, 0x73, 0xB8, 0x16,
    0x8B, 0xF,  0xEB, 0x2A, 0x41, 0xB,  0xC4, 0xFE, 0x32, 0x32, 0x31, 0x2B, 0x5B, 0xE5, 0x26, 0x2,
    0xEB, 0x0,  0xA1, 0xED, 0x71, 0xED, 0xA1, 0x47, 0xB0, 0xFD, 0x85, 0x39, 0x38, 0xF8, 0xF1, 0xC7,
    0xB8, 0x14, 0x1B, 0x8B, 0x54, 0x99, 0xE8, 0xA5, 0xF1, 0x5A, 0xCF, 0xFC, 0x66, 0xCF, 0xCF, 0xB2,
    0x93, 0x74, 0x63, 0x24, 0xE0, 0x28, 0x90, 0x98, 0x88, 0xD4, 0x7D, 0xFB, 0x70, 0x69, 0xEB, 0x56,
    0x23, 0xFF, 0x4A, 0x99, 0xF9, 0x2E, 0x1F, 0x38, 0x4,  0x29, 0x4D, 0x39, 0xF,  0xA8, 0x9D, 0xB5,
    0x3E, 0x17, 0x80, 0x3E, 0xD0, 0x17, 0xFA, 0x64, 0x7,  0x63, 0x1B, 0x58, 0x99, 0x7,  0x38, 0x2D,
    0x0,  0xBE, 0x3E, 0xC5, 0xD8, 0xEF, 0xDF, 0xFE, 0x1D, 0x1C, 0x32, 0x7C, 0x12, 0x17, 0x7D, 0xAB,
    0x1,  0x99, 0x51, 0xA9, 0x1E, 0x52, 0x42, 0x3B, 0xE0, 0xBD, 0xA1, 0xF,  0xE1, 0xD3, 0x17, 0x5F,
    0xC4, 0xE1, 0xD5, 0xAB, 0x71, 0x45, 0xAE, 0xE7, 0xA9, 0x7,  0xE,  0x20, 0x2D, 0x29, 0x29, 0xFD,
    0x9A, 0x7F, 0x3B, 0x1,  0xC8, 0x79, 0xA6, 0x63, 0x7A, 0xE6, 0x63, 0x7E, 0x96, 0xF3, 0xD4, 0xE0,
    0xC1, 0x78, 0xA6, 0x51, 0x33, 0xA4, 0x4,  0xD6, 0xCD, 0x5A, 0x9F, 0xB,  0x40, 0x1F, 0x4C, 0x7F,
    0xE8, 0x9B, 0x1D, 0xCC, 0xCA, 0xAB, 0x6C, 0x9C, 0x16, 0x80, 0xF9, 0x74, 0xAF, 0x7D, 0x7F, 0x7B,
    0x52, 0x82, 0x55, 0x19, 0xBB, 0xD9, 0x83, 0xCA, 0x55, 0xCF, 0x82, 0x8B, 0x95, 0xEA, 0xE0, 0xF1,
    0x90, 0x46, 0xF8, 0x7B, 0xBF, 0x7E, 0x58, 0xFD, 0xC2, 0xB,  0x38, 0xB4, 0x6A, 0x15, 0x2E, 0x73,
    0x4,  0x90, 0x1E, 0xCD, 0x9E, 0x7D, 0xC7, 0x11, 0x40, 0xCE, 0x73, 0xA4, 0xE0, 0x88, 0x71, 0x59,
    0x4,  0xC0, 0xFC, 0xAB, 0xE7, 0xCC, 0xC1, 0xE4, 0x81, 0x3,  0xD1, 0x26, 0x24, 0x4,  0xFD, 0x7C,
    0xFD, 0xA4, 0xC1, 0xAA, 0xDE, 0x52, 0xAF, 0x55, 0xD0, 0x17, 0xFA, 0x44, 0xDF, 0xEC, 0x60, 0x56,
    0x9E, 0x36, 0xE6, 0xB4, 0x0,  0xF8, 0x96, 0x8C, 0x94, 0xE4, 0x33, 0x88, 0xAE, 0x54, 0x1B, 0xE,
    0xB9, 0x76, 0x26, 0x1B, 0xC1, 0xAB, 0x91, 0x5,  0x63, 0xCA, 0xFA, 0xA1, 0x71, 0xAD, 0x5A, 0x18,
    0x1B, 0x11, 0x81, 0x65, 0x91, 0x91, 0xD8, 0xF7, 0xC1, 0x7,  0xB8, 0xC0, 0x39, 0xC0, 0x8F, 0x3F,
    0x1A, 0x33, 0x7C, 0x5E, 0xE3, 0x6F, 0x3B, 0x7,  0xE0, 0x6A, 0x40, 0xE6, 0xA,  0x9C, 0x33, 0xFC,
    0x15, 0x15, 0x85, 0x7D, 0x2B, 0x56, 0xE0, 0x83, 0x99, 0x33, 0x31, 0xBE, 0x77, 0x6F, 0x34, 0xAB,
    0x5B, 0x17, 0x65, 0x4B, 0x95, 0xC2, 0xF0, 0xA2, 0xA5, 0x6F, 0xA9, 0xD7, 0x2A, 0xE8, 0xB,  0x7D,
    0xA2, 0x6F, 0xF4, 0x51, 0x75, 0x63, 0x5B, 0x78, 0x5C, 0x0,  0xBC, 0x4B, 0xF5, 0xF8, 0xA2, 0xA5,
    0x12, 0xA8, 0x2A, 0xD8, 0xC1, 0x5E, 0x58, 0x3E, 0x28, 0xB,  0x96, 0xC9, 0x6C, 0xBA, 0x54, 0xF1,
    0xE2, 0xA8, 0x5B, 0xB5, 0x2A, 0x86, 0x76, 0xE9, 0x82, 0x7F, 0x3E, 0xF9, 0x24, 0xE2, 0x17, 0x2F,
    0xC6, 0xE9, 0x8D, 0x1B, 0x91, 0x62, 0xAE, 0x2,  0xB8, 0x4,  0xBC, 0xDD, 0x2A, 0x40, 0x56, 0x9,
    0xC6, 0x2A, 0xE0, 0xFB, 0xEF, 0x8D, 0x7C, 0xCC, 0xFF, 0x8E, 0x94, 0xF3, 0x70, 0xB7, 0x6E, 0x8,
    0xA9, 0x51, 0xC3, 0x28, 0xDF, 0xC7, 0xC7, 0xC7, 0xA8, 0x2B, 0x7B, 0xFD, 0x56, 0x41, 0x9F, 0xE8,
    0x1B, 0x7D, 0xB4, 0xC3, 0x1D, 0xC3, 0x1E, 0x15, 0x40, 0xFB, 0xF6, 0xED, 0xD3, 0xB7, 0x7D, 0x7,
    0xC,  0x87, 0x43, 0x2,  0x75, 0xA8, 0xBC, 0xF4, 0x9C, 0xA,  0xB5, 0x32, 0x70, 0x40, 0xAE, 0xA3,
    0xBE, 0x3E, 0x85, 0x50, 0xBC, 0x68, 0x51, 0x54, 0xF3, 0xF7, 0xC7, 0x3,  0x32, 0x49, 0x99, 0x33,
    0x66, 0xC,  0xBE, 0x7E, 0xFD, 0x75, 0xFC, 0xB6, 0x66, 0xD,  0x2E, 0xCB, 0x84, 0xCE, 0x58, 0x9,
    0xFC, 0xF6, 0xDB, 0xED, 0xF7, 0x1,  0xE4, 0x3C, 0xD3, 0x31, 0xFD, 0x6F, 0x6B, 0xD7, 0x1A, 0xF9,
    0x59, 0xCE, 0x83, 0xED, 0xDA, 0xA1, 0x46, 0x60, 0x20, 0x4A, 0x14, 0x2B, 0x66, 0x8,  0x80, 0x75,
    0xB1, 0xCE, 0xCC, 0x1C, 0xAC, 0x82, 0x3E, 0xD1, 0x37, 0xFA, 0x68, 0x7,  0x63, 0x9B, 0x78, 0x4C,
    0x0,  0x63, 0xC7, 0x8E, 0x35, 0x7E, 0x74, 0x11, 0x15, 0x50, 0x47, 0x82, 0x54, 0xD,  0xE7, 0xFD,
    0x64, 0x36, 0xEE, 0x57, 0xC7, 0x40, 0x6A, 0x85, 0xDA, 0x68, 0x51, 0x24, 0xBD, 0x67, 0x16, 0x29,
    0x5C, 0x18, 0x15, 0x7D, 0x7D, 0x8D, 0xEB, 0xF5, 0x63, 0x7D, 0xFB, 0xE2, 0xBD, 0x69, 0xD3, 0x10,
    0xFF, 0xEE, 0xBB, 0x38, 0xB9, 0x7E, 0x3D, 0xAE, 0xC4, 0xC5, 0xA5, 0x5F, 0xA,  0x7E, 0xFD, 0xD5,
    0x58, 0xEA, 0x71, 0x4E, 0xC0, 0xEB, 0xBD, 0xF1, 0x97, 0x9F, 0xE5, 0x38, 0xCF, 0x33, 0x1D, 0xD3,
    0x33, 0x1F, 0xF3, 0xB3, 0x9C, 0xB6, 0xD,  0x1A, 0x18, 0xE5, 0xB2, 0x7C, 0xD6, 0x43, 0xB0, 0x4E,
    0xD6, 0x6D, 0xF2, 0xB0, 0xA,  0xFA, 0x44, 0xDF, 0xE8, 0xA3, 0x1D, 0x7E, 0x60, 0xC2, 0x36, 0xF1,
    0x98, 0x0,  0xF8, 0x5B, 0xB5, 0xD3, 0x9B, 0xB6, 0xC0, 0x21, 0xD7, 0xCA, 0x38, 0xF6, 0x7E, 0xBF,
    0xBA, 0x19, 0xF8, 0x48, 0x66, 0xCF, 0x66, 0xA3, 0x14, 0x12, 0x94, 0x94, 0x61, 0x3A, 0xA8, 0x72,
    0x65, 0xF4, 0x94, 0x51, 0x60, 0xC6, 0xF0, 0xE1, 0xF8, 0x64, 0xF6, 0x6C, 0xFC, 0xB0, 0x74, 0xA9,
    0xD1, 0xA8, 0x5C, 0xDA, 0xA5, 0xEC, 0xDC, 0x69, 0x34, 0x74, 0xEA, 0xDE, 0xBD, 0x19, 0xE0, 0x67,
    0x1E, 0xE7, 0x79, 0xA6, 0x63, 0x7A, 0xE6, 0x63, 0x7E, 0x96, 0xC3, 0xF2, 0x58, 0x6E, 0xA1, 0x1B,
    0xF5, 0x98, 0xF8, 0xC8, 0xD8, 0x7C, 0xAA, 0xEB, 0x32, 0xD0, 0x37, 0xFA, 0x48, 0x5F, 0x55, 0x37,
    0x67, 0x7F, 0x3F, 0xE8, 0x94, 0x0,  0xF8, 0x3E, 0x9C, 0x83, 0x53, 0x67, 0x49, 0x70, 0x6A, 0xE0,
    0x20, 0x87, 0xCC, 0x8A, 0xF5, 0xC,  0xA4, 0x4A, 0xD0, 0x42, 0xA,  0x17, 0xCB, 0xD2, 0x28, 0xEC,
    0xA5, 0xE5, 0xCA, 0x94, 0x41, 0xC3, 0xA0, 0x20, 0xC,  0xEC, 0xD4, 0x9,  0xB3, 0x1F, 0x79, 0x4,
    0x9F, 0xC8, 0x8A, 0x80, 0x3D, 0xFA, 0xA8, 0x94, 0xC3, 0x6B, 0xFB, 0x85, 0x2D, 0x5B, 0x8C, 0xFD,
    0x1,  0xAE, 0x10, 0xF8, 0x97, 0x9F, 0x79, 0x9C, 0xE7, 0x99, 0x8E, 0xE9, 0x99, 0x8F, 0xF9, 0x59,
    0xE,  0xCB, 0xCB, 0xDC, 0xFB, 0x4D, 0xB0, 0x6E, 0x72, 0x30, 0xF9, 0x58, 0x5,  0x7D, 0x33, 0x7C,
    0x9C, 0x3A, 0x4B, 0x79, 0x1,  0xB0, 0x4D, 0x3C, 0x26, 0x80, 0x9D, 0xD2, 0x3B, 0xB7, 0xB7, 0xEA,
    0x2,  0x47, 0xF9, 0x9A, 0x48, 0x66, 0xB0, 0xFC, 0x83, 0xD,  0x7C, 0x24, 0x33, 0xE7, 0xEC, 0x8D,
    0x42, 0x14, 0x2B, 0x52, 0x4,  0xFE, 0xE5, 0xCA, 0xA1, 0xB9, 0xCC, 0xDC, 0x7,  0x77, 0xEE, 0x8C,
    0xC8, 0x11, 0x23, 0xB0, 0x64, 0xEA, 0x54, 0xAC, 0x7F, 0xED, 0x35, 0xEC, 0x58, 0xB4, 0x8,  0x7B,
    0x64, 0x75, 0xF0, 0xCB, 0xCA, 0x95, 0x38, 0x2C, 0xCB, 0x3C, 0xFE, 0xE5, 0x67, 0x1E, 0xE7, 0x79,
    0xA6, 0x63, 0x7A, 0xE6, 0x63, 0x7E, 0x96, 0xC3, 0xF2, 0x72, 0xAA, 0xC7, 0x18, 0x5,  0xB8, 0xAB,
    0x77, 0x83, 0x8F, 0x55, 0xD0, 0x37, 0xFA, 0x48, 0x5F, 0x55, 0x37, 0xB6, 0x89, 0xC7, 0x4,  0x70,
    0x6C, 0xCF, 0x5E, 0x9,  0x4C, 0x10, 0xA2, 0xA4, 0x87, 0xA4, 0xFA, 0x87, 0x48, 0xB0, 0x42, 0x90,
    0x5A, 0x31, 0xF8, 0x96, 0xDE, 0x9F, 0xF9, 0x52, 0xC0, 0x9,  0x61, 0x40, 0xF9, 0xF2, 0x68, 0x24,
    0xCB, 0xC2, 0xFB, 0x65, 0x18, 0x1F, 0xDF, 0xAB, 0x17, 0x66, 0x8D, 0x1A, 0x85, 0xB7, 0x9F, 0x78,
    0x2,  0xEF, 0x4F, 0x9F, 0x8E, 0xF,  0x9F, 0x7B, 0xE,  0x1F, 0x3F, 0xFF, 0xBC, 0xF1, 0x97, 0x9F,
    0x79, 0x9C, 0xE7, 0x99, 0x8E, 0xE9, 0x99, 0x8F, 0xF9, 0x59, 0x4E, 0xA1, 0x5C, 0x1A, 0x3F, 0x63,
    0x14, 0xA8, 0x18, 0x6C, 0x70, 0xB2, 0xA,  0xFA, 0x46, 0x1F, 0xE9, 0x6B, 0xCA, 0xA9, 0xD3, 0x4A,
    0xB,  0x80, 0xAF, 0xB4, 0xF5, 0x88, 0x0,  0xB8, 0xED, 0x98, 0xB4, 0x7E, 0x13, 0x1C, 0x12, 0x98,
    0x78, 0x4E, 0x98, 0x2,  0x1A, 0x1A, 0xD8, 0x5C, 0xAE, 0x66, 0xAE, 0x8D, 0x62, 0x8A, 0x80, 0x3D,
    0x97, 0xC3, 0x37, 0xAF, 0xE1, 0xAD, 0xEA, 0xD7, 0xC7, 0xFD, 0xAD, 0x5B, 0xE3, 0xA1, 0xAE, 0x5D,
    0x31, 0xF6, 0xC1, 0x7,  0x31, 0x41, 0xD6, 0xF6, 0x26, 0xF8, 0x99, 0xC7, 0x79, 0x9E, 0xE9, 0x98,
    0x9E, 0xF9, 0x98, 0xFF, 0x76, 0x8D, 0x6F, 0x82, 0x5C, 0x4C, 0x5E, 0x56, 0x41, 0x1F, 0xE9, 0xEB,
    0xA9, 0xAF, 0xBE, 0x51, 0xFE, 0x46, 0x51, 0x67, 0xB6, 0x84, 0xF3, 0x2C, 0x0,  0xBE, 0x22, 0xF5,
    0xD7, 0x79, 0x6F, 0x48, 0x50, 0x6A, 0xE3, 0xA0, 0x7F, 0x7D, 0x20, 0xB0, 0x91, 0x81, 0x9,  0x25,
    0x2B, 0xDC, 0xB1, 0x61, 0xCC, 0x39, 0x1,  0x27, 0x70, 0x7E, 0x32, 0x8B, 0xAF, 0x1E, 0x10, 0x80,
    0xE0, 0xEA, 0xD5, 0xD1, 0xB4, 0x4E, 0x1D, 0xB4, 0xA8, 0x57, 0xF,  0xAD, 0x82, 0x83, 0x8D, 0xBF,
    0xFC, 0xCC, 0xE3, 0x3C, 0xCF, 0x74, 0x4C, 0x9F, 0xD3, 0x35, 0x3F, 0x37, 0x90, 0x8B, 0xC9, 0xCB,
    0x2A, 0xE8, 0x23, 0x7D, 0xA5, 0xCF, 0xAA, 0x9B, 0x33, 0xAF, 0xAF, 0xCD, 0xB3, 0x0,  0xF8, 0xE4,
    0xAA, 0x5D, 0x83, 0x1F, 0x85, 0x43, 0x7A, 0xC6, 0xC9, 0x40, 0xE9, 0x25, 0x95, 0x9A, 0x20, 0x35,
    0xB0, 0x31, 0xAA, 0x16, 0x2E, 0x7A, 0xD7, 0xD,  0x54, 0xE8, 0x86, 0x10, 0x38, 0x9C, 0x73, 0x33,
    0x87, 0x3B, 0x7A, 0xE5, 0x4A, 0x97, 0xCE, 0x0,  0x3F, 0xF3, 0x38, 0xCF, 0x33, 0x5D, 0xA1, 0xBB,
    0x2C, 0xD7, 0x4,  0xB9, 0x90, 0x13, 0xB9, 0x59, 0x5,  0x7D, 0xA4, 0xAF, 0xF4, 0x59, 0x75, 0x73,
    0xE6, 0xA9, 0x62, 0x79, 0x16, 0x0,  0x5F, 0x7F, 0xB6, 0xB5, 0x76, 0x4B, 0x9,  0x4A, 0x5D, 0x5C,
    0x31, 0x82, 0xD4, 0x14, 0xD1, 0x15, 0xEA, 0xE4, 0xA9, 0x81, 0x3C, 0x1,  0x72, 0x22, 0x37, 0xAB,
    0xA0, 0x8F, 0xF4, 0x95, 0x3E, 0xAB, 0x6E, 0xCE, 0xBC, 0x9A, 0x2E, 0xCF, 0x2,  0x58, 0xFC, 0xD2,
    0xCB, 0x70, 0xC8, 0xEC, 0x78, 0x2B, 0x87, 0xFF, 0xCA, 0xCD, 0xC,  0x4C, 0x29, 0x1D, 0xA0, 0x9C,
    0x0,  0xC8, 0xC9, 0xE4, 0x67, 0x15, 0xF4, 0x95, 0x3E, 0x5F, 0x3E, 0xF6, 0xBB, 0xD2, 0x2,  0x78,
    0xE7, 0x9D, 0x77, 0xDC, 0x2F, 0x80, 0x55, 0xB3, 0x5F, 0x92, 0x60, 0xD4, 0xC7, 0xCE, 0x80, 0x6,
    0xC0, 0x3D, 0xA1, 0x6,  0x5A, 0x14, 0x2D, 0xA5, 0x9C, 0x0,  0xC8, 0xC9, 0xE4, 0x67, 0x15, 0xF4,
    0x95, 0x3E, 0x9F, 0xD9, 0xB6, 0x43, 0x69, 0x1,  0x2C, 0x5F, 0xBE, 0xDC, 0xFD, 0x2,  0xF8, 0x6A,
    0xC6, 0x6C, 0x38, 0x64, 0x8D, 0xBC, 0x87, 0x93, 0xA4, 0x7B, 0x5A, 0x20, 0xA5, 0x72, 0x28, 0x4A,
    0xFA, 0x14, 0x52, 0x4E, 0x0,  0xE4, 0x44, 0x6E, 0xE4, 0x68, 0x15, 0xF4, 0x95, 0x3E, 0x27, 0xAE,
    0x5A, 0xA7, 0xB4, 0x0,  0xD6, 0xAD, 0x5B, 0xE7, 0x7E, 0x1,  0x38, 0x26, 0xCF, 0x90, 0x60, 0x84,
    0xE0, 0x10, 0xAF, 0x91, 0x55, 0x5A, 0x61, 0x77, 0x40, 0x23, 0xE5, 0x1A, 0xDF, 0x4,  0xB9, 0x91,
    0xA3, 0x55, 0xD0, 0x57, 0xFA, 0x7C, 0xF4, 0xAD, 0xC5, 0x4A, 0xB,  0x60, 0xCB, 0x96, 0x2D, 0xEE,
    0x17, 0x40, 0xEC, 0xE8, 0x89, 0x70, 0xC8, 0x90, 0x78, 0x82, 0xC3, 0x63, 0xD5, 0xD6, 0x78, 0x5F,
    0xD6, 0xC8, 0xAA, 0xA,  0x80, 0xDC, 0xC8, 0xD1, 0x2A, 0xE8, 0x2B, 0x7D, 0x3E, 0xF0, 0xB4, 0xDA,
    0x5B, 0xC2, 0xCE, 0xEC, 0x6,  0xE6, 0x59, 0x0,  0x71, 0xBD, 0x47, 0x48, 0x30, 0x1A, 0x22, 0xB9,
    0xAA, 0xF4, 0x8E, 0x6A, 0x6D, 0x31, 0xA5, 0x4C, 0x65, 0x65, 0x5,  0x40, 0x6E, 0xE4, 0x68, 0x15,
    0xF4, 0x95, 0x3E, 0xEF, 0x1A, 0x3A, 0x5E, 0x69, 0x1,  0xF0, 0xE5, 0x53, 0x6E, 0x17, 0xC0, 0xB6,
    0xFB, 0x6,  0xC1, 0x21, 0xD7, 0xC4, 0xB3, 0xEC, 0x1D, 0xD5, 0xDA, 0x61, 0x60, 0x49, 0x3F, 0x65,
    0x5,  0x40, 0x6E, 0xE4, 0x68, 0x15, 0xE7, 0xAA, 0xB6, 0x31, 0x7C, 0x4E, 0xE8, 0x35, 0x42, 0xB,
    0x20, 0x2E, 0xAC, 0x97, 0x4,  0xA3, 0x31, 0x2E, 0xB2, 0x77, 0x54, 0xBF, 0x17, 0x5D, 0x4A, 0x94,
    0x53, 0x56, 0x0,  0xE4, 0x46, 0x8E, 0x56, 0x41, 0x5F, 0xE9, 0xF3, 0x8E, 0xF0, 0x7E, 0x4A, 0xB,
    0x20, 0x29, 0x29, 0xC9, 0x3,  0x23, 0x40, 0xEB, 0x9E, 0x70, 0x54, 0x6A, 0x82, 0x8B, 0xC,  0x4E,
    0x8D, 0xF6, 0x68, 0x55, 0xAC, 0x8C, 0xB2, 0x2,  0x20, 0x37, 0x72, 0xB4, 0x8A, 0xCB, 0x35, 0xC2,
    0xC,  0x9F, 0xBF, 0x6D, 0x1B, 0xA1, 0xB4, 0x0,  0x92, 0x93, 0x93, 0xDD, 0x2F, 0x80, 0x98, 0x90,
    0x8E, 0x12, 0x8C, 0xA6, 0x48, 0x31, 0x82, 0xD3, 0x1,  0x4D, 0x8A, 0x95, 0x56, 0x56, 0x0,  0xE4,
    0x46, 0x8E, 0x56, 0x41, 0x5F, 0xE9, 0x73, 0x6C, 0xC3, 0x4E, 0x5A, 0x0,  0xD1, 0x75, 0xEE, 0x85,
    0xA3, 0x72, 0x33, 0xA4, 0xD4, 0xEC, 0x8,  0xD4, 0xC,  0x47, 0x60, 0x2E, 0x5F, 0x1,  0xAB, 0x0,
    0x72, 0x23, 0x47, 0xAB, 0xB8, 0x2E, 0xA0, 0xCF, 0x31, 0xE2, 0xBB, 0xCA, 0xC6, 0x1F, 0x8B, 0xBA,
    0x7F, 0x1F, 0xA0, 0x72, 0x73, 0x3,  0x69, 0x41, 0xD2, 0x1B, 0x4,  0xBE, 0x85, 0x8A, 0x28, 0x2B,
    0x0,  0x72, 0xC3, 0xD,  0x9E, 0x56, 0x61, 0xFA, 0xAD, 0xBA, 0xB9, 0x5D, 0x0,  0x51, 0x41, 0x32,
    0x21, 0xE2, 0x1E, 0x40, 0xAD, 0x2E, 0x6,  0x54, 0x6D, 0x7C, 0x13, 0x26, 0x4F, 0x2B, 0x48, 0x13,
    0xD0, 0x67, 0xFA, 0x5E, 0xE0, 0x5,  0x10, 0xDB, 0xA8, 0xAB, 0x4,  0xA3, 0x5,  0xAE, 0xD7, 0xEA,
    0x2A, 0xC1, 0xE9, 0xAA, 0xFE, 0x25, 0xE0, 0x6,  0x4F, 0x2B, 0x48, 0x31, 0x4,  0xD0, 0x2,  0xB1,
    0x8D, 0xD5, 0xFE, 0xBD, 0x20, 0x6F, 0xA,  0x71, 0xBB, 0x0,  0xB6, 0x36, 0xEB, 0x1,  0x47, 0x95,
    0x96, 0x48, 0xA9, 0x2D, 0xC1, 0xA8, 0xDD, 0xD,  0x75, 0x8A, 0x96, 0x54, 0x56, 0x0,  0xE4, 0x46,
    0x8E, 0x56, 0x41, 0x5F, 0xE9, 0xF3, 0xB6, 0xD0, 0xFB, 0xF5, 0x24, 0x30, 0x2E, 0x7C, 0x90, 0x4,
    0xA3, 0x15, 0x2E, 0x33, 0x38, 0x75, 0xBA, 0xA3, 0x45, 0x71, 0x5F, 0x65, 0x5,  0x40, 0x6E, 0xE4,
    0x68, 0x15, 0x17, 0xC5, 0x57, 0xFA, 0xBC, 0xA3, 0xCB, 0x50, 0x2D, 0x0,  0x43, 0x0,  0x55, 0x5B,
    0x4B, 0x50, 0xEE, 0x93, 0xE0, 0xF4, 0x40, 0x17, 0x85, 0x77, 0x2,  0xC9, 0x8D, 0x1C, 0xAD, 0x82,
    0xBE, 0xD2, 0xE7, 0x1D, 0x5D, 0x87, 0xE9, 0x8D, 0xA0, 0x6D, 0x11, 0xA3, 0x24, 0x18, 0x6D, 0x70,
    0x8E, 0x2,  0xA8, 0xDB, 0x13, 0x43, 0x14, 0xFE, 0x2E, 0x80, 0xDC, 0xC8, 0xD1, 0x2A, 0xCE, 0x1A,
    0x2,  0x68, 0x83, 0xEF, 0x7,  0x4C, 0xD0, 0x5B, 0xC1, 0x71, 0x3,  0xC6, 0xC1, 0xC1, 0x2F, 0x48,
    0xEA, 0x88, 0x0,  0xEA, 0x3D, 0x80, 0x19, 0x15, 0x6A, 0x2B, 0x2B, 0x0,  0x72, 0x23, 0x47, 0xAB,
    0xA0, 0xAF, 0xF4, 0x79, 0xD7, 0x88, 0xC9, 0x5A, 0x0,  0x5B, 0xC7, 0x3C, 0x2D, 0xC1, 0x68, 0x87,
    0x13, 0x9C, 0x3,  0xD4, 0x8B, 0xC0, 0x27, 0x95, 0x43, 0x95, 0x15, 0x0,  0xB9, 0x91, 0xA3, 0x55,
    0xD0, 0x57, 0xFA, 0x7C, 0x60, 0x9A, 0xDA, 0x2F, 0xC2, 0x8C, 0x8F, 0x8F, 0x77, 0xBF, 0x0,  0x36,
    0x3F, 0xF5, 0x3C, 0x1C, 0xD5, 0xEF, 0xC5, 0x21, 0xAE, 0x2,  0xEA, 0xF7, 0xC2, 0x81, 0xA0, 0xCE,
    0xCA, 0xA,  0x80, 0xDC, 0xC8, 0xD1, 0x2A, 0xE8, 0x2B, 0x7D, 0x3E, 0xFA, 0xDF, 0xCB, 0x95, 0x16,
    0x80, 0x33, 0xCF, 0x9,  0xC8, 0xB3, 0x0,  0xFE, 0x3F, 0x72, 0xAE, 0x4,  0x23, 0xC,  0x7B, 0xB8,
    0x49, 0x12, 0xDC, 0x1B, 0xA9, 0x12, 0x20, 0x15, 0x77, 0x3,  0xC9, 0x89, 0xDC, 0xC8, 0xD1, 0x2A,
    0xE8, 0x2B, 0x7D, 0x4E, 0x5C, 0xB3, 0x41, 0x69, 0x1,  0x38, 0xF3, 0xFB, 0xC0, 0x3C, 0xB,  0xE0,
    0xE3, 0xD9, 0x2F, 0xC3, 0x51, 0xA3, 0x3D, 0x76, 0x72, 0x8B, 0x34, 0xA4, 0xAF, 0x81, 0xE,  0xA5,
    0x2A, 0x2A, 0x27, 0x0,  0x72, 0x32, 0xF9, 0x59, 0x5,  0x7D, 0xA5, 0xCF, 0x67, 0xBE, 0xFD, 0x5E,
    0x69, 0x1,  0x2C, 0x5D, 0xBA, 0xD4, 0xFD, 0x2,  0xF8, 0xDF, 0xB9, 0x14, 0x40, 0x7,  0x6C, 0xE5,
    0x17, 0x25, 0x21, 0xFD, 0xC,  0x3C, 0xEF, 0x1F, 0xAC, 0x9C, 0x0,  0xC8, 0xC9, 0xE4, 0x67, 0x15,
    0xF4, 0x95, 0x3E, 0x5F, 0x3E, 0xFE, 0x87, 0xD2, 0x2,  0x70, 0xE6, 0x11, 0xF2, 0x79, 0x16, 0x0,
    0x1F, 0x50, 0xBC, 0xB5, 0x69, 0x4,  0x1C, 0x35, 0x3B, 0xE2, 0xA,  0x3,  0xD4, 0x60, 0x0,  0x76,
    0xD7, 0xEA, 0xA6, 0xDE, 0xD,  0xA1, 0xC2, 0x89, 0xDC, 0xAC, 0x82, 0x3E, 0xD2, 0x57, 0xFA, 0xAC,
    0xBA, 0x39, 0xF3, 0xF0, 0xE8, 0x3C, 0xB,  0x80, 0x8F, 0x26, 0xDD, 0x35, 0xEA, 0x1F, 0x12, 0x94,
    0x70, 0x9C, 0xC,  0x96, 0x6B, 0x6C, 0xC3, 0x81, 0x6,  0xEA, 0x29, 0x74, 0x63, 0x8,  0xB9, 0x98,
    0xBC, 0xAC, 0x82, 0x3E, 0xD2, 0x57, 0xFA, 0xAC, 0xBA, 0x39, 0xF3, 0xD8, 0xD8, 0x3C, 0xB,  0x20,
    0x22, 0x22, 0x2,  0xBF, 0xBE, 0xBE, 0x4,  0xE,  0xB9, 0x2E, 0x1E, 0xAC, 0xD7, 0x53, 0x82, 0x34,
    0xC8, 0xC0, 0xB4, 0x8A, 0xEA, 0x5C, 0x6,  0xC8, 0xC5, 0xE4, 0x65, 0x15, 0xF4, 0x91, 0xBE, 0xD2,
    0x67, 0xD5, 0x8D, 0x6D, 0xE3, 0x76, 0x1,  0xF0, 0xFD, 0xB5, 0x27, 0x37, 0x46, 0x4B, 0x50, 0x3A,
    0x23, 0x9E, 0x7B, 0xE5, 0x8D, 0x86, 0x18, 0x88, 0xAF, 0xDD, 0x5D, 0x19, 0x1,  0x90, 0x8B, 0xC9,
    0xCB, 0x2A, 0xE8, 0x23, 0x7D, 0x3D, 0xF5, 0x4D, 0xAC, 0xD2, 0x8D, 0x7F, 0xED, 0xDA, 0x35, 0xA7,
    0xDE, 0x2D, 0xEC, 0xD4, 0x3,  0x22, 0x8E, 0xFE, 0xB4, 0xF,  0xE,  0x59, 0x1A, 0x45, 0xC9, 0xFA,
    0x38, 0xB5, 0xF1, 0x50, 0xE0, 0x6,  0x3A, 0x94, 0xF2, 0x57, 0x60, 0xF6, 0xEF, 0x9F, 0xC1, 0xC7,
    0x2A, 0xE8, 0x1B, 0x7D, 0xA4, 0xAF, 0x29, 0xA7, 0xCF, 0x2A, 0x2D, 0x80, 0xE3, 0xC7, 0x8F, 0x7B,
    0xEE, 0x9,  0x21, 0x7C, 0x40, 0xF1, 0xF6, 0x6E, 0xA3, 0x25, 0x30, 0x5D, 0x91, 0xCC, 0x6B, 0x65,
    0x93, 0x87, 0xC,  0x6C, 0x52, 0xE0, 0x6,  0x11, 0x72, 0x30, 0xF9, 0x58, 0x5,  0x7D, 0xA3, 0x8F,
    0xF4, 0x55, 0x75, 0x73, 0xF6, 0xA1, 0xD1, 0x4E, 0x9,  0x60, 0xE5, 0xCA, 0x95, 0x38, 0xF8, 0xC2,
    0x3F, 0xE1, 0xA8, 0xDD, 0xD,  0x7,  0xB9, 0x59, 0xD2, 0xE4, 0xE1, 0xC,  0x74, 0xF0, 0xE2, 0x2F,
    0x85, 0x59, 0x77, 0x66, 0x2E, 0x56, 0x41, 0xDF, 0xC,  0x1F, 0xC5, 0x57, 0xD5, 0x8D, 0x6D, 0xE2,
    0x31, 0x1,  0xCC, 0x9D, 0x3B, 0x17, 0xA7, 0xA3, 0x76, 0x48, 0x70, 0xEE, 0x43, 0x5C, 0xDD, 0xFB,
    0x81, 0xA6, 0x23, 0x32, 0xB0, 0xA9, 0xB6, 0xF7, 0x96, 0x84, 0xAC, 0x3B, 0x33, 0x17, 0xAB, 0xA0,
    0x6F, 0xF4, 0x91, 0xBE, 0xAA, 0x6E, 0x6C, 0x13, 0x8F, 0x9,  0x60, 0xF8, 0xF0, 0xE1, 0x48, 0xBD,
    0x72, 0x15, 0x51, 0xD,  0x22, 0xE0, 0x90, 0x49, 0xD2, 0xF9, 0x26, 0xC3, 0x80, 0x66, 0x23, 0x33,
    0xD0, 0xC7, 0xB7, 0x9A, 0xC7, 0x1B, 0x9F, 0x75, 0x66, 0xE6, 0x60, 0x15, 0xF4, 0x89, 0xBE, 0xD1,
    0x47, 0xFA, 0xAA, 0xBA, 0xB1, 0x4D, 0x3C, 0x26, 0x0,  0xBE, 0xBC, 0x98, 0xF7, 0x9F, 0xED, 0x7A,
    0x34, 0x52, 0x82, 0xD4, 0x3,  0x87, 0xB8, 0x69, 0xD2, 0x6C, 0x54, 0x6,  0xFE, 0x94, 0xD9, 0x73,
    0x55, 0xF,  0x3E, 0x33, 0x80, 0x75, 0xB1, 0xCE, 0xCC, 0x1C, 0xAC, 0x82, 0x3E, 0xD1, 0x37, 0xFA,
    0xA8, 0xBA, 0xB1, 0x2D, 0x9C, 0x7D, 0xA1, 0xB4, 0xD3, 0xF,  0x8B, 0xE6, 0x77, 0xCF, 0xC7, 0x97,
    0xAF, 0x83, 0x43, 0x86, 0xC9, 0x1D, 0xF5, 0x1F, 0x4,  0x9A, 0x3F, 0x92, 0x5,  0x9B, 0xEB, 0xDC,
    0x8F, 0x22, 0x1E, 0x78, 0x6E, 0x0,  0xEB, 0x60, 0x5D, 0xD9, 0xEB, 0xB7, 0xA,  0xFA, 0x44, 0xDF,
    0xE8, 0xA3, 0xEA, 0xE6, 0xCC, 0x7D, 0x0,  0x96, 0x5,  0xB0, 0x7E, 0xFD, 0x7A, 0xA4, 0x9C, 0x3D,
    0x8F, 0xE8, 0x26, 0x7D, 0x25, 0x50, 0x3D, 0x91, 0xDC, 0x74, 0x38, 0x10, 0xFA, 0x68, 0x16, 0x3C,
    0x5B, 0xB9, 0x99, 0xDB, 0x5,  0xC0, 0x3A, 0xB2, 0xD7, 0x6B, 0x15, 0xF4, 0x85, 0x3E, 0xD1, 0x37,
    0xFA, 0xA8, 0xBA, 0xB1, 0x2D, 0x3C, 0x2E, 0x0,  0x3E, 0x9B, 0x96, 0xB6, 0x6F, 0xFA, 0x1B, 0x70,
    0xD4, 0x7B, 0x0,  0xBB, 0x1B, 0xF4, 0x7,  0x5A, 0x8C, 0xCD, 0x82, 0xD4, 0xD0, 0x31, 0x98, 0x14,
    0xD0, 0xD0, 0x6D, 0x8D, 0xCF, 0xB2, 0x59, 0x47, 0xF6, 0x7A, 0xAD, 0x82, 0xBE, 0xD0, 0x27, 0xFA,
    0x66, 0x7,  0x73, 0xF6, 0x39, 0xC1, 0x96, 0x4,  0x30, 0x68, 0xD0, 0x20, 0xA3, 0xF2, 0x73, 0x9,
    0xFB, 0x24, 0x58, 0x11, 0x6,  0x2E, 0x72, 0xF8, 0x6C, 0xF1, 0x1F, 0xB7, 0x60, 0x5A, 0xA5, 0xA6,
    0xAE, 0xDF, 0xEE, 0xE5, 0x13, 0x4A, 0x72, 0xA8, 0xCB, 0x2A, 0xE8, 0x83, 0xE9, 0xF,  0x7D, 0xB3,
    0x83, 0xB1, 0x2D, 0x3C, 0x2E, 0x0,  0x6E, 0x3B, 0x9E, 0x3B, 0x77, 0x2E, 0xFD, 0x56, 0xA4, 0xBE,
    0x93, 0xE0, 0x90, 0x6B, 0xE6, 0xFE, 0x46, 0x83, 0x81, 0x96, 0xE3, 0x72, 0xC4, 0x6B, 0xD5, 0xDA,
    0xBA, 0x64, 0x4E, 0xC0, 0x32, 0x58, 0x56, 0x6E, 0xF5, 0x58, 0x5,  0x7D, 0xA0, 0x2F, 0xF4, 0xC9,
    0xE,  0xC6, 0x36, 0x70, 0x66, 0xB,  0xD8, 0x25, 0xAF, 0x8D, 0xE3, 0x33, 0x69, 0x68, 0x7F, 0x7C,
    0xBA, 0x49, 0x82, 0xD6, 0xB,  0xD1, 0xC1, 0xBD, 0x71, 0xA5, 0xA5, 0xF4, 0xA4, 0x56, 0x13, 0x72,
    0xC4, 0xF7, 0xD,  0x7,  0xA2, 0x4B, 0xD9, 0x2A, 0xCE, 0xDF, 0xE6, 0x2D, 0x79, 0x59, 0x46, 0x6E,
    0xE5, 0x5B, 0x5,  0xB9, 0xD3, 0x7,  0xFA, 0x42, 0x9F, 0xEC, 0x60, 0xCE, 0x3C, 0x17, 0xC8, 0x65,
    0x2,  0x30, 0x5F, 0x1C, 0x65, 0xBC, 0x38, 0xB2, 0xFB, 0x78, 0x38, 0x24, 0x78, 0x7B, 0xB9, 0x8F,
    0xDE, 0xEA, 0x6F, 0xB7, 0xC5, 0x5A, 0x99, 0xB5, 0xB7, 0xCA, 0xC3, 0x8E, 0x21, 0xD3, 0x32, 0xCF,
    0x9D, 0xCA, 0xB5, 0xA,  0x72, 0xA7, 0xF,  0xF4, 0xC5, 0x2E, 0x2F, 0x8E, 0xB4, 0xF2, 0xC2, 0x28,
    0xCB, 0x2,  0x18, 0x39, 0x72, 0x64, 0x6,  0x91, 0xC4, 0x75, 0x5B, 0x24, 0x78, 0x7D, 0xC,  0x9C,
    0xE3, 0xF5, 0xB4, 0xF5, 0xE3, 0x77, 0xC4, 0x49, 0xB9, 0xDE, 0xBE, 0x5F, 0xAB, 0x2B, 0x1E, 0xF1,
    0xF,  0xC1, 0x10, 0xBF, 0xBA, 0x59, 0xC0, 0x63, 0x3C, 0xC7, 0x34, 0x77, 0x53, 0x96, 0x55, 0x90,
    0xB3, 0xC9, 0x9F, 0xBE, 0xD8, 0xC5, 0xD8, 0x6,  0x5E, 0x13, 0x0,  0xAF, 0x3D, 0xA7, 0x4F, 0x9F,
    0xCE, 0x18, 0x5,  0x76, 0xF4, 0x96, 0xB9, 0x40, 0x48, 0x5F, 0xC4, 0x73, 0x2E, 0xD0, 0x66, 0xA2,
    0xAD, 0x40, 0xCE, 0xE4, 0x4E, 0x1F, 0xEC, 0xD2, 0xFB, 0x19, 0x7B, 0x2B, 0xD7, 0x7F, 0x97, 0xBC,
    0x3E, 0xFE, 0x8B, 0x2F, 0xBE, 0xC8, 0x20, 0x94, 0xF4, 0x55, 0xAC, 0x4,  0xB1, 0x9F, 0x81, 0x13,
    0x5C, 0x9E, 0xB5, 0x9D, 0x64, 0xB,  0x90, 0xAB, 0xC9, 0x9B, 0x3E, 0xD8, 0xC5, 0x18, 0x7B, 0xAF,
    0xBE, 0x3E, 0x9E, 0x98, 0x3A, 0x75, 0x6A, 0x16, 0x52, 0xBB, 0xC6, 0xCD, 0x81, 0x43, 0xD6, 0xD1,
    0x5B, 0x65, 0xB2, 0x76, 0x85, 0xBD, 0xAB, 0xED, 0x13, 0x4A, 0x83, 0x1C, 0xC9, 0x95, 0x9C, 0xC9,
    0xDD, 0x4E, 0xC6, 0xD8, 0x7B, 0x5D, 0x0,  0xE1, 0xE1, 0xE1, 0xC6, 0x5E, 0xB4, 0x69, 0x97, 0x8E,
    0x25, 0x22, 0xA6, 0xE5, 0xC3, 0x12, 0xD0, 0x1,  0x48, 0x68, 0xF2, 0x10, 0xD2, 0xDA, 0x4D, 0x6,
    0x14, 0x5,  0xB9, 0x91, 0x23, 0xB9, 0x92, 0x33, 0xB9, 0xDB, 0xC5, 0x18, 0x73, 0xC6, 0xDE, 0xEB,
    0x2,  0x20, 0xF8, 0x93, 0xA4, 0x2C, 0x77, 0xA7, 0x7C, 0xB8, 0x1E, 0xE,  0xF6, 0x2A, 0xC1, 0x21,
    0x6E, 0xAF, 0xDE, 0xFB, 0x94, 0x92, 0x20, 0x37, 0x93, 0x27, 0x39, 0xDB, 0xC9, 0x9C, 0xF9, 0x19,
    0x98, 0xDB, 0x4,  0x30, 0x6F, 0xDE, 0xBC, 0x2C, 0xE4, 0x38, 0x89, 0x4A, 0x18, 0x3E, 0x53, 0x2,
    0x3B, 0x8,  0x51, 0x32, 0xB9, 0x3A, 0xD5, 0xFA, 0x31, 0x9,  0xF8, 0x14, 0xA5, 0x40, 0x4E, 0xE4,
    0x46, 0x8E, 0xE4, 0x6A, 0x97, 0x89, 0x9F, 0x69, 0x8C, 0xB9, 0x32, 0x2,  0xE0, 0x50, 0x74, 0xF5,
    0x6A, 0xD6, 0xEF, 0xCC, 0x2F, 0xFF, 0x9E, 0x84, 0x6D, 0x9D, 0xC7, 0xC3, 0x21, 0x41, 0x8E, 0x91,
    0xF5, 0xF5, 0x59, 0x4E, 0xB8, 0xC2, 0xFE, 0xA1, 0x4,  0xC8, 0x85, 0x9C, 0xC8, 0x8D, 0x1C, 0xC9,
    0xD5, 0x4E, 0xC6, 0x58, 0xBB, 0x62, 0xF8, 0x77, 0x99, 0x0,  0x88, 0x8D, 0x1B, 0x37, 0xDE, 0xBA,
    0x4D, 0xB9, 0xFB, 0x20, 0xA2, 0x5B, 0x8D, 0x94, 0x40, 0xF,  0x91, 0x80, 0xF,  0xC3, 0xA9, 0x36,
    0x7F, 0x7,  0xDA, 0x3F, 0xE3, 0x55, 0x90, 0x3,  0xB9, 0x90, 0x13, 0xB9, 0x91, 0xA3, 0xDD, 0x8C,
    0xB1, 0x76, 0x55, 0xBB, 0xB9, 0x4C, 0x0,  0x93, 0x26, 0xE5, 0xBC, 0x77, 0x9E, 0xB4, 0x69, 0x3B,
    0x1C, 0x4D, 0x25, 0xE0, 0xD2, 0xE3, 0xA2, 0x9B, 0x88, 0x8,  0x38, 0x12, 0x74, 0x98, 0xE6, 0x15,
    0xB0, 0x6E, 0x72, 0x20, 0x17, 0x72, 0x22, 0x37, 0x3B, 0x1A, 0x63, 0xAD, 0x9C, 0x0,  0xB8, 0x21,
    0xC1, 0x47, 0x94, 0xE4, 0x64, 0xC7, 0x96, 0x7D, 0x29, 0x41, 0x1F, 0x66, 0x20, 0x4A, 0x66, 0xDD,
    0x47, 0x39, 0x27, 0xE8, 0x30, 0xDD, 0xA3, 0x60, 0x9D, 0xAC, 0xDB, 0xE4, 0x41, 0x4E, 0x76, 0x34,
    0xC6, 0xD8, 0xEA, 0xE6, 0x8F, 0x5B, 0x4,  0x40, 0x2C, 0x59, 0x92, 0xFB, 0xAF, 0x67, 0xFE, 0xF8,
    0xCC, 0x1,  0x47, 0x33, 0x59, 0x1E, 0xB2, 0x11, 0x4,  0xBB, 0x5A, 0x8C, 0xC1, 0xD5, 0xE,  0x53,
    0x81, 0x8E, 0x33, 0xDC, 0xA,  0xD6, 0xC1, 0xBA, 0xCC, 0x7A, 0xC9, 0x81, 0x5C, 0xEC, 0x6A, 0x8C,
    0xB1, 0x2B, 0xDB, 0xCC, 0xA5, 0x2,  0xE8, 0xD1, 0xA3, 0x87, 0xF1, 0xB,  0x95, 0x5C, 0xD5, 0xBB,
    0x69, 0x7,  0xA2, 0x42, 0x65, 0x4E, 0xD0, 0xE4, 0x61, 0x3,  0xB1, 0xCD, 0x46, 0x22, 0xE9, 0xDE,
    0x27, 0x81, 0xF0, 0x99, 0x6E, 0x1,  0xCB, 0x66, 0x1D, 0x66, 0x7D, 0xAC, 0x9B, 0x1C, 0xEC, 0x6A,
    0x8C, 0x2D, 0x63, 0xAC, 0xAC, 0x0,  0xCC, 0x5B, 0xC5, 0x6E, 0x67, 0x67, 0xE2, 0xF7, 0x21, 0xB6,
    0xF3, 0x63, 0x72, 0xD,  0x1E, 0x9E, 0x81, 0x4,  0xE9, 0xA1, 0x67, 0x39, 0x43, 0xF,  0x7F, 0xD6,
    0x25, 0x60, 0x59, 0x2C, 0x33, 0x73, 0x1D, 0xAC, 0x93, 0x75, 0xDB, 0xD9, 0xAC, 0xDC, 0xFA, 0xE5,
    0x31, 0x1,  0x8C, 0x1E, 0x7D, 0xE7, 0x5F, 0xD1, 0xA4, 0x24, 0x9F, 0xC7, 0xDE, 0xE9, 0xEF, 0x48,
    0xC3, 0x8C, 0xC8, 0x82, 0xDD, 0x2D, 0xC7, 0xE3, 0xA4, 0xAC, 0xD1, 0x53, 0xD8, 0x90, 0x9D, 0x9E,
    0xCF, 0x13, 0x98, 0x87, 0x79, 0x59, 0x46, 0xF6, 0x72, 0x59, 0x17, 0xEB, 0xB4, 0xBB, 0x31, 0xB6,
    0xCA, 0xB,  0x80, 0xD8, 0xB5, 0x6B, 0xD7, 0xDD, 0x4D, 0x68, 0xBE, 0xF9, 0xE,  0xB1, 0x5D, 0x26,
    0xCA, 0x75, 0x79, 0x64, 0x16, 0x44, 0x35, 0x1F, 0x85, 0x84, 0x96, 0xE3, 0x70, 0xB8, 0xDD, 0x13,
    0x48, 0xC,  0x7B, 0x1A, 0x67, 0x64, 0x6,  0x7F, 0x29, 0x3C, 0x12, 0x29, 0x9D, 0x9E, 0x33, 0xC0,
    0xFF, 0x79, 0x8C, 0xE7, 0x98, 0x86, 0x69, 0x99, 0x27, 0x7B, 0x39, 0x2C, 0x9B, 0x75, 0xE4, 0x7,
    0x63, 0x4C, 0xDD, 0xD1, 0x56, 0x6E, 0x11, 0x40, 0xF6, 0x2F, 0x88, 0x6E, 0xBB, 0xA7, 0x7D, 0x35,
    0x5,  0xBF, 0xAF, 0xFE, 0x17, 0xB6, 0xF7, 0x99, 0x2A, 0x8D, 0x36, 0xCA, 0x25, 0x60, 0x59, 0x2C,
    0x93, 0x65, 0xE7, 0x17, 0x73, 0xC5, 0x17, 0x3F, 0x1E, 0x13, 0x0,  0x97, 0x29, 0xBC, 0x57, 0x3D,
    0x2F, 0xC6, 0xAD, 0xD8, 0x3F, 0xFF, 0xB5, 0x13, 0x3F, 0x3E, 0xF5, 0x16, 0x62, 0xC2, 0x26, 0xC0,
    0xD1, 0x7C, 0x74, 0x9E, 0xC0, 0x3C, 0xCC, 0xCB, 0x32, 0xEC, 0xB6, 0xAD, 0x7B, 0x27, 0x63, 0x2C,
    0x5D, 0xB9, 0xF4, 0x73, 0xBB, 0x0,  0xF2, 0x3A, 0xA,  0xE4, 0x34, 0x2A, 0x9C, 0x8E, 0xDD, 0x8D,
    0x83, 0xFF, 0xB9, 0x42, 0x1A, 0x75, 0x1,  0x12, 0x46, 0xBD, 0x88, 0xB8, 0x7,  0x9E, 0x96, 0x21,
    0x7D, 0x92, 0x1,  0xFE, 0xCF, 0x63, 0x3C, 0xC7, 0x34, 0x4C, 0x9B, 0x9F, 0x7A, 0xBB, 0xA7, 0x7A,
    0xBF, 0x5B, 0x5,  0xE0, 0xCC, 0x28, 0xA0, 0xCD, 0xB3, 0xBD, 0xDF, 0xAD, 0x2,  0xB0, 0x3A, 0xA,
    0x68, 0x73, 0x7F, 0xEF, 0x77, 0xBB, 0x0,  0xA8, 0xDC, 0x1F, 0x7E, 0xF8, 0x41, 0xB7, 0xA2, 0x93,
    0xC6, 0xD8, 0xB9, 0xB3, 0xF7, 0xBB, 0x5D, 0x0,  0xC4, 0xB0, 0x61, 0xC3, 0xB2, 0xDC, 0x31, 0xA4,
    0xED, 0x2E, 0xE7, 0x41, 0x12, 0x33, 0xC6, 0xCE, 0xDD, 0xED, 0xE3, 0x76, 0x1,  0x10, 0x2B, 0x56,
    0xAC, 0xD0, 0x2D, 0x9A, 0x47, 0x63, 0xCC, 0x3C, 0xD1, 0x36, 0x1E, 0x11, 0x0,  0x6F, 0x5E, 0xC8,
    0xED, 0x9B, 0x42, 0x6D, 0x39, 0x7F, 0xE3, 0xE7, 0xAA, 0x1B, 0x3E, 0x94, 0x10, 0x80, 0x9E, 0x10,
    0xAA, 0x35, 0xF1, 0xF3, 0x8A, 0x0,  0xB2, 0xFF, 0x86, 0x40, 0x5B, 0xCE, 0xE6, 0x8A, 0x7B, 0xFD,
    0x95, 0x15, 0x0,  0x87, 0xB5, 0x13, 0x27, 0x4E, 0xE8, 0x56, 0xCE, 0xC5, 0x18, 0x1B, 0x4F, 0xD,
    0xFD, 0x5E, 0x11, 0x80, 0xF9, 0xAC, 0x61, 0xBD, 0x2A, 0xC8, 0x79, 0xD6, 0xEF, 0xCC, 0xB3, 0x7E,
    0x6D, 0x27, 0x80, 0x3B, 0xDD, 0x39, 0x54, 0x50, 0xCD, 0xD5, 0x77, 0xFA, 0x28, 0x2D, 0x0,  0x6E,
    0x6E, 0xC4, 0xC5, 0xC5, 0xE9, 0x56, 0xBF, 0x61, 0x8C, 0x85, 0xBB, 0x37, 0x7C, 0x94, 0x12, 0x0,
    0xD1, 0xB5, 0x6B, 0x57, 0x3D, 0x1F, 0xB8, 0x71, 0xDD, 0x67, 0x2C, 0xBC, 0xD5, 0xE,  0x5E, 0x13,
    0x80, 0xF9, 0xC0, 0xC9, 0xEC, 0x3F, 0x28, 0x29, 0x48, 0x46, 0xDF, 0x9D, 0x7D, 0xC0, 0x63, 0xBE,
    0x10, 0x0,  0x31, 0x65, 0xCA, 0x94, 0x2,  0x39, 0x29, 0xA4, 0xCF, 0xF4, 0xDD, 0xDB, 0xF1, 0xF7,
    0xBA, 0x0,  0xCC, 0xD7, 0xD0, 0x14, 0x24, 0x11, 0xD0, 0x57, 0x67, 0x5E, 0xEF, 0x92, 0x6F, 0x5,
    0x90, 0xD3, 0xF,  0x4C, 0xF3, 0xB3, 0xB9, 0xEA, 0x87, 0x9D, 0xF9, 0x4A, 0x0,  0xC4, 0xFC, 0xF9,
    0xF3, 0xF3, 0xF5, 0x48, 0x40, 0xDF, 0xE8, 0xA3, 0x4A, 0x31, 0x57, 0x4A, 0x0,  0xC4, 0xB4, 0x69,
    0xD3, 0x6E, 0xFB, 0xE3, 0x12, 0xBB, 0x1A, 0x7D, 0xA2, 0x6F, 0xAA, 0xC5, 0x5B, 0x39, 0x1,  0x10,
    0x63, 0xC7, 0x8E, 0xCD, 0x78, 0x8,  0x65, 0x7E, 0x30, 0xFA, 0x42, 0x9F, 0x54, 0x8C, 0xB5, 0x92,
    0x2,  0x20, 0x6,  0xC,  0x18, 0x80, 0x23, 0x47, 0x8E, 0xD8, 0xBE, 0xF1, 0xE9, 0x3,  0x7D, 0x51,
    0x35, 0xCE, 0xCA, 0xA,  0x80, 0x68, 0xDF, 0xBE, 0xBD, 0xF1, 0x42, 0x64, 0xBB, 0x1A, 0xB9, 0xD3,
    0x7,  0x95, 0x63, 0xAC, 0xB4, 0x0,  0x4C, 0xBC, 0xFA, 0xEA, 0xAB, 0xB6, 0x9A, 0x17, 0x90, 0x2B,
    0x39, 0xDB, 0x21, 0xB6, 0xB6, 0x10, 0x0,  0x31, 0x64, 0xC8, 0x10, 0xEC, 0xDC, 0xB9, 0x53, 0xF9,
    0xC6, 0x27, 0x47, 0x72, 0xB5, 0x4B, 0x5C, 0x6D, 0x23, 0x0,  0x13, 0x33, 0x67, 0xCE, 0x54, 0xF2,
    0xF6, 0x32, 0x72, 0x22, 0x37, 0xBB, 0xC5, 0xD3, 0x76, 0x2,  0x30, 0xE7, 0x6,  0xB,  0x17, 0x2E,
    0xC4, 0x85, 0xB,  0x17, 0xBC, 0xDE, 0xF0, 0xE4, 0x40, 0x2E, 0xAA, 0x5F, 0xEB, 0xF3, 0x95, 0x0,
    0x32, 0xDF, 0x61, 0xC4, 0xA7, 0x65, 0x27, 0x27, 0x27, 0x7B, 0xBC, 0xE1, 0x59, 0x27, 0xEB, 0xF6,
    0xF4, 0x1D, 0x3C, 0x5A, 0x0,  0x39, 0x20, 0x2C, 0x2C, 0xC,  0x91, 0x91, 0x91, 0x88, 0x89, 0x89,
    0x71, 0xEB, 0x64, 0x91, 0x65, 0xB3, 0xE,  0xD6, 0xC5, 0x3A, 0xF3, 0x43, 0xEC, 0xF2, 0x85, 0x0,
    0xB2, 0xDF, 0x67, 0xC0, 0x97, 0x28, 0xF2, 0x69, 0x1A, 0x89, 0x89, 0xD6, 0x1F, 0xFD, 0xCA, 0x32,
    0x58, 0x16, 0xCB, 0xF4, 0xE6, 0xF7, 0xF6, 0x5A, 0x0,  0x4E, 0x82, 0xAF, 0x54, 0x67, 0x8F, 0x5D,
    0xB0, 0x60, 0x81, 0xF1, 0x7A, 0x55, 0xBE, 0x61, 0x83, 0x8F, 0x59, 0xCD, 0x9,  0x3C, 0xC7, 0x34,
    0x4C, 0xCB, 0x3C, 0xCE, 0xBC, 0x8E, 0x5D, 0xB,  0x40, 0x43, 0xB,  0x40, 0x43, 0xB,  0x40, 0x43,
    0xB,  0x40, 0x43, 0xB,  0x40, 0x43, 0xB,  0x40, 0x43, 0xB,  0x40, 0x43, 0xB,  0x40, 0x43, 0xB,
    0x40, 0x43, 0xB,  0x40, 0x43, 0xB,  0x40, 0x43, 0xB,  0x40, 0x43, 0xB,  0x40, 0x43, 0xB,  0x40,
    0x43, 0xB,  0x40, 0x43, 0xB,  0x40, 0x43, 0xB,  0x40, 0x43, 0xB,  0x40, 0xC3, 0x7B, 0xF8, 0x37,
    0xC2, 0xB2, 0x9,  0x1F, 0xF6, 0x7F, 0x4,  0x7E, 0x0,  0x0,  0x0,  0x0,  0x49, 0x45, 0x4E, 0x44,
    0xAE, 0x42, 0x60, 0x82,
};

struct v3f {
    f32 x = 0;
    f32 y = 0;
    f32 z = 0;
};

bool DynOS_Gfx_IsCappyEyesDisplayList(GfxData* aGfxData, const String& aNodeName) {
    SysPath _Filename = fstring("%s/%s/%s__ID%X.txt", sys_exe_path(), DYNOS_FOLDER, aNodeName.begin(), aGfxData->mModelIdentifier);
    FILE *f = fopen(_Filename.c_str(), "r");
    if (f) { fclose(f); return true; }
    return false;
}

static bool GetDataFromFile(GfxData* aGfxData, const String& aNodeName,
    Array<v3f>& aPoints, Array<v3f>& aNormals, Array<v3f>& aTop,
    u64& aPointCount, f32& aRadius, f32& aFwdOffset) {

    String _NodeName = aNodeName.SubString(0, aNodeName.FindLast('.'));
    SysPath _Filename = fstring("%s/%s/%s__ID%X.txt", sys_exe_path(), DYNOS_FOLDER, _NodeName.begin(), aGfxData->mModelIdentifier);
    FILE* _File = fopen(_Filename.c_str(), "r");
    if (!_File) return false;

    char _Buffer[256];
    while (fgets(_Buffer, 256, _File)) {
        Array<String> tokens = Split(_Buffer, " \t\r\n");
        if (tokens.Empty()) continue;

        if (tokens[0] == "p" && tokens.Count() >= 4) {
            aPoints.Add({
                tokens[1].ParseFloat(),
                tokens[2].ParseFloat(),
                tokens[3].ParseFloat()
            });
        }
        if (tokens[0] == "n" && tokens.Count() >= 4) {
            aNormals.Add({
                tokens[1].ParseFloat(),
                tokens[2].ParseFloat(),
                tokens[3].ParseFloat()
            });
        }
        if (tokens[0] == "v" && tokens.Count() >= 4) {
            aTop.Add({
                tokens[1].ParseFloat(),
                tokens[2].ParseFloat(),
                tokens[3].ParseFloat()
            });
        }
        if (tokens[0] == "c" && tokens.Count() >= 2) {
            aPointCount = (u64) tokens[1].ParseInt();
        }
        if (tokens[0] == "r" && tokens.Count() >= 2) {
            aRadius = tokens[1].ParseFloat();
        }
        if (tokens[0] == "f" && tokens.Count() >= 2) {
            aFwdOffset = tokens[1].ParseFloat();
        }
    }
    fclose(_File);

    if (aPoints.Empty()) {
        PrintError("  ERROR: Missing points in file \"%s\"", _Filename.c_str());
        return false;
    }
    if (aNormals.Empty()) {
        PrintError("  ERROR: Missing normals in file \"%s\"", _Filename.c_str());
        return false;
    }
    if (aTop.Empty()) {
        PrintError("  ERROR: Missing top in file \"%s\"", _Filename.c_str());
        return false;
    }
    if (aPointCount == 0) {
        aPointCount = CAPPY_EYES_POINT_COUNT;
    }
    if (aRadius == 0) {
        aRadius = CAPPY_EYES_RADIUS;
    }
    if (aFwdOffset == 0) {
        aFwdOffset = CAPPY_EYES_FORWARD_OFFSET;
    }
    return true;
}

static f32 GetMagnitude(const v3f& aVector) {
    return sqrtf(
        (aVector.x * aVector.x) +
        (aVector.y * aVector.y) +
        (aVector.z * aVector.z)
    );
}

static v3f GetOrigin(const Array<v3f>& aPoints) {
    v3f aOrigin = { 0, 0, 0 };
    for (const v3f& p : aPoints) {
        aOrigin.x += p.x;
        aOrigin.y += p.y;
        aOrigin.z += p.z;
    }
    aOrigin.x /= (f32) aPoints.Count();
    aOrigin.y /= (f32) aPoints.Count();
    aOrigin.z /= (f32) aPoints.Count();
    return aOrigin;
}

static v3f GetForwardAxis(const Array<v3f>& aNormals) {
    v3f _FwdAxis = { 0, 0, 0 };
    for (const v3f& n : aNormals) {
        _FwdAxis.x += n.x;
        _FwdAxis.y += n.y;
        _FwdAxis.z += n.z;
    }
    f32 _FwdAxisMag = GetMagnitude(_FwdAxis);
    _FwdAxis.x /= _FwdAxisMag;
    _FwdAxis.y /= _FwdAxisMag;
    _FwdAxis.z /= _FwdAxisMag;
    return _FwdAxis;
}

static v3f GetVerticalAxis(const v3f& aFwdAxis, const v3f& aOrigin, const v3f& aTop) {

    // Pseudo-vertical axis
    v3f _PseudoVrtAxis = { aTop.x - aOrigin.x, aTop.y - aOrigin.y, aTop.z - aOrigin.z };
    f32 _PseudoVrtAxisMag = GetMagnitude(_PseudoVrtAxis);
    _PseudoVrtAxis.x /= _PseudoVrtAxisMag;
    _PseudoVrtAxis.y /= _PseudoVrtAxisMag;
    _PseudoVrtAxis.z /= _PseudoVrtAxisMag;

    // True vertical axis
    // V = pV - (pV . F) * F
    f32 _PseudoVrtAxisDotFwdAxis = (_PseudoVrtAxis.x * aFwdAxis.x) + (_PseudoVrtAxis.y * aFwdAxis.y) + (_PseudoVrtAxis.z * aFwdAxis.z);
    v3f _VrtAxis = {
        _PseudoVrtAxis.x - _PseudoVrtAxisDotFwdAxis * aFwdAxis.x,
        _PseudoVrtAxis.y - _PseudoVrtAxisDotFwdAxis * aFwdAxis.y,
        _PseudoVrtAxis.z - _PseudoVrtAxisDotFwdAxis * aFwdAxis.z
    };
    f32 _VrtAxisMag = GetMagnitude(_VrtAxis);
    _VrtAxis.x /= _VrtAxisMag;
    _VrtAxis.y /= _VrtAxisMag;
    _VrtAxis.z /= _VrtAxisMag;
    return _VrtAxis;
}

static v3f GetHorizontalAxis(const v3f& aFwdAxis, const v3f& aVrtAxis) {

    // Rodrigues' rotation formula with theta = -90 degrees
    // H = (V x F) + F * (V . F)
    f32 _VrtAxisDotFwdAxis = (aVrtAxis.x * aFwdAxis.x) + (aVrtAxis.y * aFwdAxis.y) + (aVrtAxis.z * aFwdAxis.z);
    v3f _HrzAxis = {
        (aFwdAxis.z * aVrtAxis.y) - (aFwdAxis.y * aVrtAxis.z) + aFwdAxis.x * _VrtAxisDotFwdAxis,
        (aFwdAxis.x * aVrtAxis.z) - (aFwdAxis.z * aVrtAxis.x) + aFwdAxis.y * _VrtAxisDotFwdAxis,
        (aFwdAxis.y * aVrtAxis.x) - (aFwdAxis.x * aVrtAxis.y) + aFwdAxis.z * _VrtAxisDotFwdAxis
    };
    f32 _HrzAxisMag = GetMagnitude(_HrzAxis);
    _HrzAxis.x /= _HrzAxisMag;
    _HrzAxis.y /= _HrzAxisMag;
    _HrzAxis.z /= _HrzAxisMag;
    return _HrzAxis;
}

//
// Cappy eyes display list
//

static Vtx CappyEyesGetVertex(const v3f& aOrigin, const v3f& aHrzAxis, const v3f& aVrtAxis, const v3f& aFwdAxis, f32 aHrzValue, f32 aVrtValue, f32 aFwdValue, f32 aTexU, f32 aTexV) {
    if (aTexU < 0) aTexU = ((aTexU + 0.5f) * CAPPY_EYES_TEXCOORDS_MULT) - 0.5f;
    else           aTexU = ((aTexU - 0.5f) * CAPPY_EYES_TEXCOORDS_MULT) + 0.5f;
    if (aTexV < 0) aTexV = ((aTexV + 0.5f) * CAPPY_EYES_TEXCOORDS_MULT) - 0.5f;
    else           aTexV = ((aTexV - 0.5f) * CAPPY_EYES_TEXCOORDS_MULT) + 0.5f;
    Vtx _Vertex = { { { 0, 0, 0 }, 0, { (s16) (aTexU * 0x1000), (s16) (aTexV * 0x1800) }, { (u8) (aFwdAxis.x * 127.f), (u8) (aFwdAxis.y * 127.f), (u8) (aFwdAxis.z * 127.f), 0xff } } };
    _Vertex.v.ob[0] = aHrzValue * aHrzAxis.x + aVrtValue * aVrtAxis.x + aFwdValue * aFwdAxis.x + aOrigin.x;
    _Vertex.v.ob[1] = aHrzValue * aHrzAxis.y + aVrtValue * aVrtAxis.y + aFwdValue * aFwdAxis.y + aOrigin.y;
    _Vertex.v.ob[2] = aHrzValue * aHrzAxis.z + aVrtValue * aVrtAxis.z + aFwdValue * aFwdAxis.z + aOrigin.z;
    return _Vertex;
}

static DataNode<Gfx>* CappyEyesGetDisplayListNode(GfxData* aGfxData, const String& aNodeName) {

    // Load data from file
    Array<v3f> _Points;
    Array<v3f> _Normals;
    Array<v3f> _Top;
    u64 _PointCount = 0;
    f32 _Radius = 0;
    f32 _FwdOffset = 0;
    if (!GetDataFromFile(aGfxData, aNodeName, _Points, _Normals, _Top, _PointCount, _Radius, _FwdOffset)) {
        return NULL;
    }

    // Axes
    v3f _Origin  = GetOrigin(_Points);
    v3f _FwdAxis = GetForwardAxis(_Normals);
    v3f _VrtAxis = GetVerticalAxis(_FwdAxis, _Origin, _Top[0]);
    v3f _HrzAxis = GetHorizontalAxis(_FwdAxis, _VrtAxis);

    // Offset
    _Origin.x += _FwdAxis.x * _FwdOffset;
    _Origin.y += _FwdAxis.y * _FwdOffset;
    _Origin.z += _FwdAxis.z * _FwdOffset;

    // Texture (loaded only once)
    DataNode<TexData> *_TextureNode = NULL;
    for (auto &node : aGfxData->mTextures) {
        if (node->mName == GFX_DYN_CMD_ID "cappy_eyes_texture") {
            _TextureNode = node;
            break;
        }
    }
    if (!_TextureNode) {
        _TextureNode = New<DataNode<TexData>>();
        _TextureNode->mName = GFX_DYN_CMD_ID "cappy_eyes_texture";
        _TextureNode->mData = New<TexData>();
        _TextureNode->mData->mPngData = Array<u8>(sCappyEyesTexDataPng, sCappyEyesTexDataPng + sizeof(sCappyEyesTexDataPng));
        _TextureNode->mLoadIndex = aGfxData->mLoadIndex++;
        aGfxData->mTextures.Add(_TextureNode);
    }

    // Vertices
    DataNode<Vtx>* _VertexNode = New<DataNode<Vtx>>();
    _VertexNode->mName = String(GFX_DYN_CMD_ID "cappy_eyes_vtx_%s", aNodeName.begin());
    _VertexNode->mData = New<Vtx>(((_PointCount * 4llu) + 2llu) * 2llu);
    _VertexNode->mSize = ((_PointCount * 4llu) + 2llu) * 2llu;
    _VertexNode->mLoadIndex = aGfxData->mLoadIndex++;
    Vtx* pVertex = _VertexNode->mData;

    // Vertex display list
    DataNode<Gfx>* _VertexDisplayListNode = New<DataNode<Gfx>>();
    _VertexDisplayListNode->mName = String(GFX_DYN_CMD_ID "cappy_eyes_vtx_dl_%s", aNodeName.begin());
    _VertexDisplayListNode->mData = New<Gfx>((((_PointCount * 4llu) + 3llu) * 2llu) + 1llu);
    _VertexDisplayListNode->mSize = (((_PointCount * 4llu) + 3llu) * 2llu) + 1llu;
    _VertexDisplayListNode->mLoadIndex = aGfxData->mLoadIndex++;
    Gfx* pVertexDisplayList = _VertexDisplayListNode->mData;

    // +1 for Left eye, -1 for Right eye
    for (f32 sign = +1; sign >= -1; sign -= 2) {

        // The eye
        aGfxData->mPointerList.Add(pVertexDisplayList);
        gSPVertex(pVertexDisplayList++, pVertex, _PointCount + 1, 0);

        *(pVertex++) = CappyEyesGetVertex(_Origin, _HrzAxis, _VrtAxis, _FwdAxis, sign * CAPPY_EYES_GAP * (_Radius * CAPPY_EYES_WH_RATIO), 0, -(1.f - coss(0x2000)) * CAPPY_EYES_CURVE, 0.5f, 0.5f);
        for (s32 i = 0; i != _PointCount; ++i) {
            s16 a = (s16) ((65536.f * i) / _PointCount);
            f32 u = (1.f - ((1.f + sins(a)) / 2.f)) * sign - ((sign - 1.f) / 2.f);
            f32 v = (1.f - ((1.f + coss(a)) / 2.f));
            f32 f = (1.f - (coss((sins(-sign * a) + 1.f) * 0x2000))) * CAPPY_EYES_CURVE;

            *(pVertex++) = CappyEyesGetVertex(_Origin, _HrzAxis, _VrtAxis, _FwdAxis, (sign * CAPPY_EYES_GAP - sins(a)) * (_Radius * CAPPY_EYES_WH_RATIO), coss(a) * _Radius, -f, u, v);

            u32 v0 = 0;
            u32 v1 = (i + 1);
            u32 v2 = (((i + 2) - 1) % _PointCount) + 1;
            gSP1Triangle(pVertexDisplayList++, v0, v1, v2, 0);
        }

        // Border of the eye
        aGfxData->mPointerList.Add(pVertexDisplayList);
        gSPVertex(pVertexDisplayList++, pVertex, _PointCount * 2, 0);

        for (s32 i = 0; i != _PointCount; ++i) {
            s16 a = (s16)((65536.f * i) / _PointCount);
            f32 u = (1.f - ((1.f + sins(a)) / 2.f)) * sign - ((sign - 1.f) / 2.f);
            f32 v = (1.f - ((1.f + coss(a)) / 2.f));
            f32 f = (1.f - (coss((sins(-sign * a) + 1.f) * 0x2000))) * CAPPY_EYES_CURVE;

            *(pVertex++) = CappyEyesGetVertex(_Origin, _HrzAxis, _VrtAxis, _FwdAxis, (sign * CAPPY_EYES_GAP - sins(a)) * (_Radius * CAPPY_EYES_WH_RATIO), coss(a) * _Radius, -f,                    u, v);
            *(pVertex++) = CappyEyesGetVertex(_Origin, _HrzAxis, _VrtAxis, _FwdAxis, (sign * CAPPY_EYES_GAP - sins(a)) * (_Radius * CAPPY_EYES_WH_RATIO), coss(a) * _Radius, -f - CAPPY_EYES_DEPTH, u, v);

            u32 v0 = (2 * i + 0);
            u32 v1 = (2 * i + 1);
            u32 v2 = (2 * i + 2) % (_PointCount * 2);
            u32 v3 = (2 * i + 3) % (_PointCount * 2);
            gSP1Triangle(pVertexDisplayList++, v0, v1, v2, 0);
            gSP1Triangle(pVertexDisplayList++, v2, v1, v3, 0);
        }

        // Back of the eye
        aGfxData->mPointerList.Add(pVertexDisplayList);
        gSPVertex(pVertexDisplayList++, pVertex, _PointCount + 1, 0);

        *(pVertex++) = CappyEyesGetVertex(_Origin, _HrzAxis, _VrtAxis, _FwdAxis, sign * CAPPY_EYES_GAP * (_Radius * CAPPY_EYES_WH_RATIO), 0, -(1.f - coss(0x2000)) * CAPPY_EYES_CURVE - CAPPY_EYES_DEPTH, 0, 0);
        for (s32 i = 0; i != _PointCount; ++i) {
            s16 a = (s16)((65536.f * i) / _PointCount);
            f32 f = (1.f - (coss((sins(-sign * a) + 1.f) * 0x2000))) * CAPPY_EYES_CURVE;

            *(pVertex++) = CappyEyesGetVertex(_Origin, _HrzAxis, _VrtAxis, _FwdAxis, (sign * CAPPY_EYES_GAP - sins(a)) * (_Radius * CAPPY_EYES_WH_RATIO), coss(a) * _Radius, -f - CAPPY_EYES_DEPTH, 0, 0);

            u32 v0 = 0;
            u32 v1 = (i + 1);
            u32 v2 = (((i + 2) - 1) % _PointCount) + 1;
            gSP1Triangle(pVertexDisplayList++, v0, v2, v1, 0);
        }
    }
    gSPEndDisplayList(pVertexDisplayList++);

    // Display list
    DataNode<Gfx>* _DisplayListNode = New<DataNode<Gfx>>();
    _DisplayListNode->mName = String(GFX_DYN_CMD_ID "cappy_eyes_dl_%s", aNodeName.begin());
    _DisplayListNode->mData = New<Gfx>(0x100);
    _DisplayListNode->mLoadIndex = aGfxData->mLoadIndex++;
    Gfx* pDisplayList = _DisplayListNode->mData;

    // Append Cappy's texture and vertices
    gDPPipeSync(pDisplayList++);
    gSPClearGeometryMode(pDisplayList++, METAL_BITS);
    gDPSetCombineLERP(pDisplayList++, 0, 0, 0, TEXEL0, TEXEL0, 0, ENVIRONMENT, 0, 0, 0, 0, TEXEL0, TEXEL0, 0, ENVIRONMENT, 0);
    gSPTexture(pDisplayList++, 0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON);
    aGfxData->mPointerList.Add(pDisplayList);
    gDPLoadTextureBlock(pDisplayList++, _TextureNode, G_IM_FMT_RGBA, G_IM_SIZ_32b, 128, 192, 0, 0, 0, 0, 0, 0, 0);
    aGfxData->mPointerList.Add(pDisplayList);
    gSPDisplayList(pDisplayList++, _VertexDisplayListNode);
    gSPTexture(pDisplayList++, 0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_OFF);
    gDPPipeSync(pDisplayList++);

    // Restore previous context
    *(pDisplayList++) = aGfxData->mGfxContext.mCombineMode;
    *(pDisplayList++) = aGfxData->mGfxContext.mSpTexture;
    *(pDisplayList++) = aGfxData->mGfxContext.mTxLoadTile;
    gDPTileSync(pDisplayList++);
    *(pDisplayList++) = aGfxData->mGfxContext.mTxRenderTile;
    *(pDisplayList++) = aGfxData->mGfxContext.mSetTileSize;

    // Metal code
    // We assume that the last loaded texture is the metal texture
    if (aGfxData->mGfxContext.mMetalBits.words.w1 != 0) {
        gSPSetGeometryMode(pDisplayList++, aGfxData->mGfxContext.mMetalBits.words.w1);
        aGfxData->mPointerList.Add(pDisplayList);
        gDPLoadTextureBlock(pDisplayList++, aGfxData->mGfxContext.mCurrentTexture, G_IM_FMT_RGBA, G_IM_SIZ_16b, 64, 32, 0,
            G_TX_WRAP | G_TX_NOMIRROR, G_TX_WRAP | G_TX_NOMIRROR, 6, 5, G_TX_NOLOD, G_TX_NOLOD);
    }

    // End display list
    gSPEndDisplayList(pDisplayList++);
    _DisplayListNode->mSize = (u32) (pDisplayList - _DisplayListNode->mData);

    // Append nodes
    aGfxData->mVertices.Add(_VertexNode);
    aGfxData->mDisplayLists.Add(_VertexDisplayListNode);
    aGfxData->mDisplayLists.Add(_DisplayListNode);
    return _DisplayListNode;
}

//
// Gfx Dynamic Commands
//

void DynOS_Gfx_PushDynCmd(GfxData* aGfxData, DataNode<Gfx>* aNode, Gfx*& aHead, u8 aCmd) {
    switch (aCmd) {

    case GFXDYNCMD_CAPPY_EYES: {
        DataNode<Gfx>* node = CappyEyesGetDisplayListNode(aGfxData, aNode->mName);
        if (node) {
            aGfxData->mGfxDynCmds.Add({ aNode->mData, (u32) (aHead - aNode->mData), GFXDYNCMD_CAPPY_EYES });
            gDPNoOp(aHead++);
            aGfxData->mPointerList.Add(aHead);
            gSPDisplayList(aHead++, node);
        }
    } break;

    }
}
